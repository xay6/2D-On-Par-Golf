#if UNITY_EDITOR || ENABLE_RUNTIME_ADMIN_APIS
//-----------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplayer.Editor.Matchmaker.Authoring.AdminApi.Shared;
using UnityEngine.Scripting;

namespace Unity.Services.Multiplayer.Editor.Matchmaker.Authoring.AdminApi.Matchmaker.Model
{
    /// <summary>
    /// Filter
    /// </summary>
    [DataContract(Name = "Filter")]
    [Preserve]
    partial class Filter
    {
        /// <summary>
        /// A string representing the operator for the filter. (e.g. \&quot;Equal\&quot;, \&quot;NotEqual\&quot;, \&quot;LessThan\&quot;, \&quot;GreaterThan\&quot;)
        /// </summary>
        /// <value>A string representing the operator for the filter. (e.g. \&quot;Equal\&quot;, \&quot;NotEqual\&quot;, \&quot;LessThan\&quot;, \&quot;GreaterThan\&quot;)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatorEnum
        {
            /// <summary>
            /// Enum Equal for value: Equal
            /// </summary>
            [EnumMember(Value = "Equal")]
            Equal = 1,

            /// <summary>
            /// Enum NotEqual for value: NotEqual
            /// </summary>
            [EnumMember(Value = "NotEqual")]
            NotEqual = 2,

            /// <summary>
            /// Enum LessThan for value: LessThan
            /// </summary>
            [EnumMember(Value = "LessThan")]
            LessThan = 3,

            /// <summary>
            /// Enum GreaterThan for value: GreaterThan
            /// </summary>
            [EnumMember(Value = "GreaterThan")]
            GreaterThan = 4

        }

        /// <summary>
        /// A string representing the operator for the filter. (e.g. \&quot;Equal\&quot;, \&quot;NotEqual\&quot;, \&quot;LessThan\&quot;, \&quot;GreaterThan\&quot;)
        /// </summary>
        /// <value>A string representing the operator for the filter. (e.g. \&quot;Equal\&quot;, \&quot;NotEqual\&quot;, \&quot;LessThan\&quot;, \&quot;GreaterThan\&quot;)</value>
        [DataMember(Name = "operator", EmitDefaultValue = false)]
        [Preserve]
        public OperatorEnum? Operator { get; set; }
        /// <summary>
        /// A string representing the attribute name of the filter field.
        /// </summary>
        /// <value>A string representing the attribute name of the filter field.</value>
        [DataMember(Name = "attribute", EmitDefaultValue = false)]
        [Preserve]
        public string Attribute { get; set; }

        /// <summary>
        /// A value (number or string) for the filter.
        /// </summary>
        /// <value>A value (number or string) for the filter.</value>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        [Preserve]
        public ApiObject Value { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="Filter" /> class.
        /// </summary>
        /// <param name="attribute">A string representing the attribute name of the filter field..</param>
        /// <param name="_operator">A string representing the operator for the filter. (e.g. \&quot;Equal\&quot;, \&quot;NotEqual\&quot;, \&quot;LessThan\&quot;, \&quot;GreaterThan\&quot;).</param>
        /// <param name="value">A value (number or string) for the filter..</param>
        [Preserve]
        public Filter(string attribute = default(string), OperatorEnum? _operator = default(OperatorEnum?), ApiObject value = default(ApiObject))
        {
            this.Attribute = attribute;
            this.Operator = _operator;
            this.Value = value;
        }
    }

}
#endif
