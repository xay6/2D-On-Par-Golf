#if UNITY_EDITOR || ENABLE_RUNTIME_ADMIN_APIS
//-----------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------
using System;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using UnityEngine.Scripting;

namespace Unity.Services.Multiplayer.Editor.Matchmaker.Authoring.AdminApi.Matchmaker.Model
{
    /// <summary>
    /// MatchRules
    /// </summary>
    [DataContract(Name = "MatchRules")]
    [Preserve]
    partial class MatchRules
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Rules for value: Rules
            /// </summary>
            [EnumMember(Value = "Rules")]
            Rules = 1

        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        [Preserve]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Gets or Sets Rules
        /// </summary>
        [DataMember(Name = "rules", IsRequired = true, EmitDefaultValue = true)]
        [Preserve]
        public Rules Rules { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatchRules" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="rules">rules (required).</param>
        [Preserve]
        public MatchRules(TypeEnum type = default(TypeEnum), Rules rules = default(Rules))
        {
            this.Type = type;
            if (rules == null)
            {
                throw new ArgumentNullException("rules is a required property for MatchRules and cannot be null");
            }
            this.Rules = rules;
        }
    }

}
#endif
