
//-----------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace Unity.Services.Multiplayer.Editor.Matchmaker.Authoring.AdminApi.Shared
{
    /// <summary>
    /// API Response
    /// </summary>
    class ApiResponse
    {
        /// <summary>
        /// If the operation was successful
        /// </summary>
        public bool IsSuccessful => ErrorType == ApiErrorType.None;

        /// <summary>
        /// Gets or sets any error text defined by the calling client.
        /// </summary>
        public string ErrorText { get; internal set; }

        /// <summary>
        /// Gets the error type
        /// </summary>
        /// <value>The error type.</value>
        public ApiErrorType ErrorType { get; internal set; }

        /// <summary>
        /// Gets or sets the status code (HTTP status code)
        /// </summary>
        /// <value>The status code.</value>
        public int StatusCode { get; internal set; }

        /// <summary>
        /// Gets or sets the HTTP headers
        /// </summary>
        /// <value>HTTP headers</value>
        public Dictionary<string, string> Headers { get; internal set; }

        /// <summary>
        /// The content
        /// </summary>
        public string Content { get; internal set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiResponse" /> class.
        /// </summary>
        public ApiResponse()
        {
        }

        /// <summary>
        /// Validates that the response was successful
        /// </summary>
        /// <exception cref="ApiException">Thrown if the response was not successful</exception>
        public void EnsureSuccessful()
        {
            if (!IsSuccessful)
            {
                throw new ApiException(this);
            }
        }

        /// <summary>
        /// Attempts to convert the content to the provided format.
        /// Returns the default value if incompatible.
        /// </summary>
        /// <typeparam name="T">The type to deserialize to</typeparam>
        /// <returns>The converted content or the default value for the type.</returns>
        public T GetContentAs<T>()
        {
            try
            {
                return JsonConvert.DeserializeObject<T>(Content);
            }
            catch (Exception)
            {
                return default;
            }
        }
    }

    /// <summary>
    /// API Response
    /// </summary>
    /// <typeparam name="T">The model associated to the response</typeparam>
    class ApiResponse<T> : ApiResponse
    {
        /// <summary>
        /// Gets or sets the data (parsed HTTP body)
        /// </summary>
        /// <value>The data.</value>
        public T Data { get; internal set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiResponse{T}" /> class.
        /// </summary>
        public ApiResponse()
        {
        }
    }
}
