#if UNITY_EDITOR || ENABLE_RUNTIME_ADMIN_APIS
//-----------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------
using System;
using System.Runtime.Serialization;
using UnityEngine;
using UnityEngine.Scripting;

namespace Unity.Services.Multiplayer.Editor.Matchmaker.Authoring.AdminApi.Matchmaker.Model
{
    /// <summary>
    /// Rules
    /// </summary>
    [DataContract(Name = "Rules")]
    [Preserve]
    partial class Rules
    {
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        [Preserve]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets MatchDefinition
        /// </summary>
        [DataMember(Name = "matchDefinition", IsRequired = true, EmitDefaultValue = true)]
        [Preserve]
        public RuleBasedMatchDefinition MatchDefinition { get; set; }

        /// <summary>
        /// Gets or Sets BackfillEnabled
        /// </summary>
        [DataMember(Name = "backfillEnabled", IsRequired = true, EmitDefaultValue = true)]
        [Preserve]
        public bool BackfillEnabled { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="Rules" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="matchDefinition">matchDefinition (required).</param>
        /// <param name="backfillEnabled">backfillEnabled (required).</param>
        [Preserve]
        public Rules(string name = default(string), RuleBasedMatchDefinition matchDefinition = default(RuleBasedMatchDefinition), bool backfillEnabled = default(bool))
        {
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Rules and cannot be null");
            }
            this.Name = name;
            if (matchDefinition == null)
            {
                throw new ArgumentNullException("matchDefinition is a required property for Rules and cannot be null");
            }
            this.MatchDefinition = matchDefinition;
            this.BackfillEnabled = backfillEnabled;
        }
    }

}
#endif
