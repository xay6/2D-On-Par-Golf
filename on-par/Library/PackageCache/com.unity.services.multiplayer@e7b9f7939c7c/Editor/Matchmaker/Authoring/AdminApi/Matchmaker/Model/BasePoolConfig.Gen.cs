#if UNITY_EDITOR || ENABLE_RUNTIME_ADMIN_APIS
//-----------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using UnityEngine.Scripting;

namespace Unity.Services.Multiplayer.Editor.Matchmaker.Authoring.AdminApi.Matchmaker.Model
{
    /// <summary>
    /// BasePoolConfig
    /// </summary>
    [DataContract(Name = "BasePoolConfig")]
    [Preserve]
    partial class BasePoolConfig
    {
        /// <summary>
        /// A unique name for this pool.
        /// </summary>
        /// <value>A unique name for this pool.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        [Preserve]
        public string Name { get; set; }

        /// <summary>
        /// Whether or not the pool is enabled.
        /// </summary>
        /// <value>Whether or not the pool is enabled.</value>
        [DataMember(Name = "enabled", IsRequired = true, EmitDefaultValue = true)]
        [Preserve]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets MatchHosting
        /// </summary>
        [DataMember(Name = "matchHosting", IsRequired = true, EmitDefaultValue = true)]
        [Preserve]
        public MatchHosting MatchHosting { get; set; }

        /// <summary>
        /// The timeout in seconds before a ticket times out.
        /// </summary>
        /// <value>The timeout in seconds before a ticket times out.</value>
        [DataMember(Name = "timeoutSeconds", IsRequired = true, EmitDefaultValue = true)]
        [Preserve]
        public int TimeoutSeconds { get; set; }

        /// <summary>
        /// Gets or Sets MatchLogic
        /// </summary>
        [DataMember(Name = "matchLogic", IsRequired = true, EmitDefaultValue = true)]
        [Preserve]
        public Rules MatchLogic { get; set; }

        /// <summary>
        /// Gets or Sets Variants
        /// </summary>
        [DataMember(Name = "variants", EmitDefaultValue = false)]
        [Preserve]
        public List<PoolConfig> Variants { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasePoolConfig" /> class.
        /// </summary>
        /// <param name="name">A unique name for this pool. (required).</param>
        /// <param name="enabled">Whether or not the pool is enabled. (required) (default to true).</param>
        /// <param name="matchHosting">matchHosting (required).</param>
        /// <param name="timeoutSeconds">The timeout in seconds before a ticket times out. (required).</param>
        /// <param name="matchLogic">matchLogic (required).</param>
        /// <param name="variants">variants.</param>
        [Preserve]
        public BasePoolConfig(string name = default(string), bool enabled = true, MatchHosting matchHosting = default(MatchHosting), int timeoutSeconds = default(int), Rules matchLogic = default(Rules), List<PoolConfig> variants = default(List<PoolConfig>))
        {
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for BasePoolConfig and cannot be null");
            }
            this.Name = name;
            this.Enabled = enabled;
            if (matchHosting == null)
            {
                throw new ArgumentNullException("matchHosting is a required property for BasePoolConfig and cannot be null");
            }
            this.MatchHosting = matchHosting;
            this.TimeoutSeconds = timeoutSeconds;
            if (matchLogic == null)
            {
                throw new ArgumentNullException("matchLogic is a required property for BasePoolConfig and cannot be null");
            }
            this.MatchLogic = matchLogic;
            this.Variants = variants;
        }
    }

}
#endif
