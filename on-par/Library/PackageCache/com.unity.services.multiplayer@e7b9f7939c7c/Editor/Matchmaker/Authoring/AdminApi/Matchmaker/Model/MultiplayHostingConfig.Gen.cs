#if UNITY_EDITOR || ENABLE_RUNTIME_ADMIN_APIS
//-----------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using UnityEngine.Scripting;

namespace Unity.Services.Multiplayer.Editor.Matchmaker.Authoring.AdminApi.Matchmaker.Model
{
    /// <summary>
    /// MultiplayHostingConfig
    /// </summary>
    [DataContract(Name = "MultiplayHostingConfig")]
    [Preserve]
    partial class MultiplayHostingConfig
    {
        /// <summary>
        /// The type of hosting. Either \&quot;Multiplay\&quot; or \&quot;MatchId\&quot;.
        /// </summary>
        /// <value>The type of hosting. Either \&quot;Multiplay\&quot; or \&quot;MatchId\&quot;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Multiplay for value: Multiplay
            /// </summary>
            [EnumMember(Value = "Multiplay")]
            Multiplay = 1

        }

        /// <summary>
        /// The type of hosting. Either \&quot;Multiplay\&quot; or \&quot;MatchId\&quot;.
        /// </summary>
        /// <value>The type of hosting. Either \&quot;Multiplay\&quot; or \&quot;MatchId\&quot;.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        [Preserve]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// The ID of the Multiplay build configuration to use.
        /// </summary>
        /// <value>The ID of the Multiplay build configuration to use.</value>
        [DataMember(Name = "buildConfigurationId", EmitDefaultValue = false)]
        [Preserve]
        public string BuildConfigurationId { get; set; }

        /// <summary>
        /// The ID of the Multiplay Fleet to use.
        /// </summary>
        /// <value>The ID of the Multiplay Fleet to use.</value>
        [DataMember(Name = "fleetId", EmitDefaultValue = false)]
        [Preserve]
        public string FleetId { get; set; }

        /// <summary>
        /// The ID of the Multiplay QoS region to use.
        /// </summary>
        /// <value>The ID of the Multiplay QoS region to use.</value>
        [DataMember(Name = "defaultQoSRegionId", EmitDefaultValue = false)]
        [Preserve]
        public string DefaultQoSRegionId { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="MultiplayHostingConfig" /> class.
        /// </summary>
        /// <param name="type">The type of hosting. Either \&quot;Multiplay\&quot; or \&quot;MatchId\&quot;..</param>
        /// <param name="buildConfigurationId">The ID of the Multiplay build configuration to use..</param>
        /// <param name="fleetId">The ID of the Multiplay Fleet to use..</param>
        /// <param name="defaultQoSRegionId">The ID of the Multiplay QoS region to use..</param>
        [Preserve]
        public MultiplayHostingConfig(TypeEnum? type = default(TypeEnum?), string buildConfigurationId = default(string), string fleetId = default(string), string defaultQoSRegionId = default(string))
        {
            this.Type = type;
            this.BuildConfigurationId = buildConfigurationId;
            this.FleetId = fleetId;
            this.DefaultQoSRegionId = defaultQoSRegionId;
        }
    }

}
#endif
