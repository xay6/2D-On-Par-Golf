#if UNITY_EDITOR || ENABLE_RUNTIME_ADMIN_APIS
//-----------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using UnityEngine.Scripting;

namespace Unity.Services.Multiplayer.Editor.Matchmaker.Authoring.AdminApi.Matchmaker.Model
{
    /// <summary>
    /// RuleBasedTeamDefinition
    /// </summary>
    [DataContract(Name = "RuleBasedTeamDefinition")]
    [Preserve]
    partial class RuleBasedTeamDefinition
    {
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        [Preserve]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TeamCount
        /// </summary>
        [DataMember(Name = "teamCount", IsRequired = true, EmitDefaultValue = true)]
        [Preserve]
        public Range TeamCount { get; set; }

        /// <summary>
        /// Gets or Sets PlayerCount
        /// </summary>
        [DataMember(Name = "playerCount", IsRequired = true, EmitDefaultValue = true)]
        [Preserve]
        public Range PlayerCount { get; set; }

        /// <summary>
        /// Gets or Sets TeamRules
        /// </summary>
        [DataMember(Name = "teamRules", EmitDefaultValue = false)]
        [Preserve]
        public List<Rule> TeamRules { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="RuleBasedTeamDefinition" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="teamCount">teamCount (required).</param>
        /// <param name="playerCount">playerCount (required).</param>
        /// <param name="teamRules">teamRules.</param>
        [Preserve]
        public RuleBasedTeamDefinition(string name = default(string), Range teamCount = default(Range), Range playerCount = default(Range), List<Rule> teamRules = default(List<Rule>))
        {
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for RuleBasedTeamDefinition and cannot be null");
            }
            this.Name = name;
            if (teamCount == null)
            {
                throw new ArgumentNullException("teamCount is a required property for RuleBasedTeamDefinition and cannot be null");
            }
            this.TeamCount = teamCount;
            if (playerCount == null)
            {
                throw new ArgumentNullException("playerCount is a required property for RuleBasedTeamDefinition and cannot be null");
            }
            this.PlayerCount = playerCount;
            this.TeamRules = teamRules;
        }
    }

}
#endif
