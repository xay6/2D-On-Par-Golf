#if UNITY_EDITOR || ENABLE_RUNTIME_ADMIN_APIS
//-----------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using UnityEngine.Scripting;

namespace Unity.Services.Multiplayer.Editor.Matchmaker.Authoring.AdminApi.Matchmaker.Model
{
    /// <summary>
    /// QueueConfig
    /// </summary>
    [DataContract(Name = "QueueConfig")]
    [Preserve]
    partial class QueueConfig
    {
        /// <summary>
        /// A unique name for this queue.
        /// </summary>
        /// <value>A unique name for this queue.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        [Preserve]
        public string Name { get; set; }

        /// <summary>
        /// Whether or not the queue is enabled.
        /// </summary>
        /// <value>Whether or not the queue is enabled.</value>
        [DataMember(Name = "enabled", IsRequired = true, EmitDefaultValue = true)]
        [Preserve]
        public bool Enabled { get; set; }

        /// <summary>
        /// The maximum number of players per ticket in this queue.
        /// </summary>
        /// <value>The maximum number of players per ticket in this queue.</value>
        [DataMember(Name = "maxPlayersPerTicket", IsRequired = true, EmitDefaultValue = true)]
        [Preserve]
        public int MaxPlayersPerTicket { get; set; }

        /// <summary>
        /// Gets or Sets DefaultPool
        /// </summary>
        [DataMember(Name = "defaultPool", EmitDefaultValue = false)]
        [Preserve]
        public BasePoolConfig DefaultPool { get; set; }

        /// <summary>
        /// Gets or Sets FilteredPools
        /// </summary>
        [DataMember(Name = "filteredPools", EmitDefaultValue = false)]
        [Preserve]
        public List<FilteredPoolConfig> FilteredPools { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="QueueConfig" /> class.
        /// </summary>
        /// <param name="name">A unique name for this queue. (required).</param>
        /// <param name="enabled">Whether or not the queue is enabled. (required) (default to true).</param>
        /// <param name="maxPlayersPerTicket">The maximum number of players per ticket in this queue. (required) (default to 20).</param>
        /// <param name="defaultPool">defaultPool.</param>
        /// <param name="filteredPools">filteredPools.</param>
        [Preserve]
        public QueueConfig(string name = default(string), bool enabled = true, int maxPlayersPerTicket = 20, BasePoolConfig defaultPool = default(BasePoolConfig), List<FilteredPoolConfig> filteredPools = default(List<FilteredPoolConfig>))
        {
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for QueueConfig and cannot be null");
            }
            this.Name = name;
            this.Enabled = enabled;
            this.MaxPlayersPerTicket = maxPlayersPerTicket;
            this.DefaultPool = defaultPool;
            this.FilteredPools = filteredPools;
        }
    }

}
#endif
