#if UNITY_EDITOR || ENABLE_RUNTIME_ADMIN_APIS
//-----------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using UnityEngine.Scripting;

namespace Unity.Services.Multiplayer.Editor.Matchmaker.Authoring.AdminApi.Matchmaker.Model
{
    /// <summary>
    /// RuleBasedMatchDefinition
    /// </summary>
    [DataContract(Name = "RuleBasedMatchDefinition")]
    [Preserve]
    partial class RuleBasedMatchDefinition
    {
        /// <summary>
        /// Gets or Sets Teams
        /// </summary>
        [DataMember(Name = "teams", IsRequired = true, EmitDefaultValue = true)]
        [Preserve]
        public List<RuleBasedTeamDefinition> Teams { get; set; }

        /// <summary>
        /// Gets or Sets MatchRules
        /// </summary>
        [DataMember(Name = "matchRules", EmitDefaultValue = false)]
        [Preserve]
        public List<Rule> MatchRules { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="RuleBasedMatchDefinition" /> class.
        /// </summary>
        /// <param name="teams">teams (required).</param>
        /// <param name="matchRules">matchRules.</param>
        [Preserve]
        public RuleBasedMatchDefinition(List<RuleBasedTeamDefinition> teams = default(List<RuleBasedTeamDefinition>), List<Rule> matchRules = default(List<Rule>))
        {
            if (teams == null)
            {
                throw new ArgumentNullException("teams is a required property for RuleBasedMatchDefinition and cannot be null");
            }
            this.Teams = teams;
            this.MatchRules = matchRules;
        }
    }

}
#endif
