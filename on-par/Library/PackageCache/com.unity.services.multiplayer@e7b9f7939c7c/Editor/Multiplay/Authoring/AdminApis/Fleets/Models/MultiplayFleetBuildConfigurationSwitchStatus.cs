//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Models
{
    /// <summary>
    /// The status of the active build configuration switch for a reservations-based fleet.
    /// </summary>
    [Preserve]
    [DataContract(Name = "multiplay.fleetBuildConfigurationSwitchStatus")]
    internal class MultiplayFleetBuildConfigurationSwitchStatus
    {
        /// <summary>
        /// The status of the active build configuration switch for a reservations-based fleet.
        /// </summary>
        /// <param name="buildConfigurationId">The ID of the active build configuration the fleet is switching to use.</param>
        /// <param name="serversProcessed">The number of servers processed so far in the switch.</param>
        /// <param name="serversPending">The number of servers pending being switched.</param>
        /// <param name="state">The state of the switch of the active build configuration for a fleet:   * &#x60;PENDING&#x60; - The build configuration switch has been queue and is waiting to start.   * &#x60;PROCESSING&#x60; - The build configuration switch has been started and is in progress.   * &#x60;COMPLETE&#x60; - The build configuration switch is completed.   * &#x60;NOT_REQUESTED&#x60; - No build configuration switch has been requested for this fleet. </param>
        /// <param name="deadline">The deadline for a switch if a timeout was set on the request.</param>
        /// <param name="oldBuildConfigurationId">The ID of the build configuration the fleet is switching away from.</param>
        [Preserve]
        public MultiplayFleetBuildConfigurationSwitchStatus(long buildConfigurationId, long serversProcessed, long serversPending, StateOptions state, DateTime deadline, long oldBuildConfigurationId = default)
        {
            BuildConfigurationId = buildConfigurationId;
            OldBuildConfigurationId = oldBuildConfigurationId;
            ServersProcessed = serversProcessed;
            ServersPending = serversPending;
            State = state;
            Deadline = deadline;
        }

        /// <summary>
        /// The ID of the active build configuration the fleet is switching to use.
        /// </summary>
        [Preserve]
        [DataMember(Name = "buildConfigurationId", IsRequired = true, EmitDefaultValue = true)]
        public long BuildConfigurationId{ get; }
        
        /// <summary>
        /// The ID of the build configuration the fleet is switching away from.
        /// </summary>
        [Preserve]
        [DataMember(Name = "oldBuildConfigurationId", EmitDefaultValue = false)]
        public long OldBuildConfigurationId{ get; }
        
        /// <summary>
        /// The number of servers processed so far in the switch.
        /// </summary>
        [Preserve]
        [DataMember(Name = "serversProcessed", IsRequired = true, EmitDefaultValue = true)]
        public long ServersProcessed{ get; }
        
        /// <summary>
        /// The number of servers pending being switched.
        /// </summary>
        [Preserve]
        [DataMember(Name = "serversPending", IsRequired = true, EmitDefaultValue = true)]
        public long ServersPending{ get; }
        
        /// <summary>
        /// The state of the switch of the active build configuration for a fleet:   * &#x60;PENDING&#x60; - The build configuration switch has been queue and is waiting to start.   * &#x60;PROCESSING&#x60; - The build configuration switch has been started and is in progress.   * &#x60;COMPLETE&#x60; - The build configuration switch is completed.   * &#x60;NOT_REQUESTED&#x60; - No build configuration switch has been requested for this fleet. 
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public StateOptions State{ get; }
        
        /// <summary>
        /// The deadline for a switch if a timeout was set on the request.
        /// </summary>
        [Preserve]
        [DataMember(Name = "deadline", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Deadline{ get; }
    
        /// <summary>
        /// The state of the switch of the active build configuration for a fleet:   * &#x60;PENDING&#x60; - The build configuration switch has been queue and is waiting to start.   * &#x60;PROCESSING&#x60; - The build configuration switch has been started and is in progress.   * &#x60;COMPLETE&#x60; - The build configuration switch is completed.   * &#x60;NOT_REQUESTED&#x60; - No build configuration switch has been requested for this fleet. 
        /// </summary>
        /// <value>The state of the switch of the active build configuration for a fleet:   * &#x60;PENDING&#x60; - The build configuration switch has been queue and is waiting to start.   * &#x60;PROCESSING&#x60; - The build configuration switch has been started and is in progress.   * &#x60;COMPLETE&#x60; - The build configuration switch is completed.   * &#x60;NOT_REQUESTED&#x60; - No build configuration switch has been requested for this fleet. </value>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateOptions
        {
            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 1,
            /// <summary>
            /// Enum PROCESSING for value: PROCESSING
            /// </summary>
            [EnumMember(Value = "PROCESSING")]
            PROCESSING = 2,
            /// <summary>
            /// Enum COMPLETE for value: COMPLETE
            /// </summary>
            [EnumMember(Value = "COMPLETE")]
            COMPLETE = 3,
            /// <summary>
            /// Enum NOTREQUESTED for value: NOT_REQUESTED
            /// </summary>
            [EnumMember(Value = "NOT_REQUESTED")]
            NOTREQUESTED = 4
        }

        /// <summary>
        /// Formats a MultiplayFleetBuildConfigurationSwitchStatus into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            serializedModel += "buildConfigurationId," + BuildConfigurationId.ToString() + ",";
            serializedModel += "oldBuildConfigurationId," + OldBuildConfigurationId.ToString() + ",";
            serializedModel += "serversProcessed," + ServersProcessed.ToString() + ",";
            serializedModel += "serversPending," + ServersPending.ToString() + ",";
            serializedModel += "state," + State + ",";
            if (Deadline != null)
            {
                serializedModel += "deadline," + Deadline.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a MultiplayFleetBuildConfigurationSwitchStatus as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            var buildConfigurationIdStringValue = BuildConfigurationId.ToString();
            dictionary.Add("buildConfigurationId", buildConfigurationIdStringValue);
            
            var oldBuildConfigurationIdStringValue = OldBuildConfigurationId.ToString();
            dictionary.Add("oldBuildConfigurationId", oldBuildConfigurationIdStringValue);
            
            var serversProcessedStringValue = ServersProcessed.ToString();
            dictionary.Add("serversProcessed", serversProcessedStringValue);
            
            var serversPendingStringValue = ServersPending.ToString();
            dictionary.Add("serversPending", serversPendingStringValue);
            
            var stateStringValue = State.ToString();
            dictionary.Add("state", stateStringValue);
            
            if (Deadline != null)
            {
                var deadlineStringValue = Deadline.ToString();
                dictionary.Add("deadline", deadlineStringValue);
            }
            
            return dictionary;
        }
    }
}
