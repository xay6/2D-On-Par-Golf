//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Builds.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Builds.Models
{
    /// <summary>
    /// A conflict blocking an operation.
    /// </summary>
    [Preserve]
    [DataContract(Name = "Conflict_Item")]
    internal class ConflictItem
    {
        /// <summary>
        /// A conflict blocking an operation.
        /// </summary>
        /// <param name="resourceId">Unique identifier for this type of conflicting resource.</param>
        /// <param name="resourceType">The type of resource causing the conflict.</param>
        /// <param name="conflictType">The type of conflict:   * &#x60;DEPENDENT&#x60; - The conflicting resource is dependent on the subject resource.   * &#x60;DEPENDENCY&#x60; - The conflicting resource is a dependency of the subject resource.   * &#x60;ACTIVE&#x60; - The conflict is due to the subject resource being in an active state.   * &#x60;INACTIVE&#x60; - The conflict is due to the subject resource being in an inactive state. </param>
        /// <param name="reason">The reason why this object is conflicting with the operation.</param>
        [Preserve]
        public ConflictItem(string resourceId, string resourceType, ConflictTypeOptions conflictType, string reason)
        {
            ResourceId = resourceId;
            ResourceType = resourceType;
            ConflictType = conflictType;
            Reason = reason;
        }

        /// <summary>
        /// Unique identifier for this type of conflicting resource.
        /// </summary>
        [Preserve]
        [DataMember(Name = "resourceId", IsRequired = true, EmitDefaultValue = true)]
        public string ResourceId{ get; }

        /// <summary>
        /// The type of resource causing the conflict.
        /// </summary>
        [Preserve]
        [DataMember(Name = "resourceType", IsRequired = true, EmitDefaultValue = true)]
        public string ResourceType{ get; }

        /// <summary>
        /// The type of conflict:   * &#x60;DEPENDENT&#x60; - The conflicting resource is dependent on the subject resource.   * &#x60;DEPENDENCY&#x60; - The conflicting resource is a dependency of the subject resource.   * &#x60;ACTIVE&#x60; - The conflict is due to the subject resource being in an active state.   * &#x60;INACTIVE&#x60; - The conflict is due to the subject resource being in an inactive state.
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "conflictType", IsRequired = true, EmitDefaultValue = true)]
        public ConflictTypeOptions ConflictType{ get; }

        /// <summary>
        /// The reason why this object is conflicting with the operation.
        /// </summary>
        [Preserve]
        [DataMember(Name = "reason", IsRequired = true, EmitDefaultValue = true)]
        public string Reason{ get; }

        /// <summary>
        /// The type of conflict:   * &#x60;DEPENDENT&#x60; - The conflicting resource is dependent on the subject resource.   * &#x60;DEPENDENCY&#x60; - The conflicting resource is a dependency of the subject resource.   * &#x60;ACTIVE&#x60; - The conflict is due to the subject resource being in an active state.   * &#x60;INACTIVE&#x60; - The conflict is due to the subject resource being in an inactive state.
        /// </summary>
        /// <value>The type of conflict:   * &#x60;DEPENDENT&#x60; - The conflicting resource is dependent on the subject resource.   * &#x60;DEPENDENCY&#x60; - The conflicting resource is a dependency of the subject resource.   * &#x60;ACTIVE&#x60; - The conflict is due to the subject resource being in an active state.   * &#x60;INACTIVE&#x60; - The conflict is due to the subject resource being in an inactive state. </value>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConflictTypeOptions
        {
            /// <summary>
            /// Enum DEPENDENT for value: DEPENDENT
            /// </summary>
            [EnumMember(Value = "DEPENDENT")]
            DEPENDENT = 1,
            /// <summary>
            /// Enum DEPENDENCY for value: DEPENDENCY
            /// </summary>
            [EnumMember(Value = "DEPENDENCY")]
            DEPENDENCY = 2,
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 3,
            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 4
        }

        /// <summary>
        /// Formats a ConflictItem into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (ResourceId != null)
            {
                serializedModel += "resourceId," + ResourceId + ",";
            }
            if (ResourceType != null)
            {
                serializedModel += "resourceType," + ResourceType + ",";
            }
            serializedModel += "conflictType," + ConflictType + ",";
            if (Reason != null)
            {
                serializedModel += "reason," + Reason;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a ConflictItem as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (ResourceId != null)
            {
                var resourceIdStringValue = ResourceId.ToString();
                dictionary.Add("resourceId", resourceIdStringValue);
            }

            if (ResourceType != null)
            {
                var resourceTypeStringValue = ResourceType.ToString();
                dictionary.Add("resourceType", resourceTypeStringValue);
            }

            var conflictTypeStringValue = ConflictType.ToString();
            dictionary.Add("conflictType", conflictTypeStringValue);

            if (Reason != null)
            {
                var reasonStringValue = Reason.ToString();
                dictionary.Add("reason", reasonStringValue);
            }

            return dictionary;
        }
    }
}
