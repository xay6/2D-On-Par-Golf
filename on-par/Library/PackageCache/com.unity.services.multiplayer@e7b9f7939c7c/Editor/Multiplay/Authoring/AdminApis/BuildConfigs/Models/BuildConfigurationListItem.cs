//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.BuildConfigs.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.BuildConfigs.Models
{
    /// <summary>
    /// A build configuration for configuring game builds to run on servers.
    /// </summary>
    [Preserve]
    [DataContract(Name = "Build_Configuration_List_Item")]
    internal class BuildConfigurationListItem
    {
        /// <summary>
        /// A build configuration for configuring game builds to run on servers.
        /// </summary>
        /// <param name="id">ID of the build configuration.</param>
        /// <param name="name">Name of the build configuration.</param>
        /// <param name="buildID">ID of the build associated with the build configuration.</param>
        /// <param name="buildName">Name of the build associated with the build configuration.</param>
        /// <param name="version">Version of the build configuration</param>
        /// <param name="fleetID">ID of the fleet associated with the build configuration.</param>
        /// <param name="fleetName">Name of the fleet associated with the build configuration.</param>
        /// <param name="updatedAt">Date of last update. Only supported for version &gt;&#x3D; 4.</param>
        /// <param name="createdAt">Date of creation. Only supported for version &gt;&#x3D; 4.</param>
        [Preserve]
        public BuildConfigurationListItem(long id, string name, long buildID, string buildName, long version, System.Guid fleetID = default, string fleetName = default, DateTime updatedAt = default, DateTime createdAt = default)
        {
            Id = id;
            Name = name;
            BuildID = buildID;
            BuildName = buildName;
            FleetID = fleetID;
            FleetName = fleetName;
            Version = version;
            UpdatedAt = updatedAt;
            CreatedAt = createdAt;
        }

        /// <summary>
        /// ID of the build configuration.
        /// </summary>
        [Preserve]
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public long Id{ get; }

        /// <summary>
        /// Name of the build configuration.
        /// </summary>
        [Preserve]
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name{ get; }

        /// <summary>
        /// ID of the build associated with the build configuration.
        /// </summary>
        [Preserve]
        [DataMember(Name = "buildID", IsRequired = true, EmitDefaultValue = true)]
        public long BuildID{ get; }

        /// <summary>
        /// Name of the build associated with the build configuration.
        /// </summary>
        [Preserve]
        [DataMember(Name = "buildName", IsRequired = true, EmitDefaultValue = true)]
        public string BuildName{ get; }

        /// <summary>
        /// ID of the fleet associated with the build configuration.
        /// </summary>
        [Preserve]
        [DataMember(Name = "fleetID", EmitDefaultValue = false)]
        public System.Guid FleetID{ get; }

        /// <summary>
        /// Name of the fleet associated with the build configuration.
        /// </summary>
        [Preserve]
        [DataMember(Name = "fleetName", EmitDefaultValue = false)]
        public string FleetName{ get; }

        /// <summary>
        /// Version of the build configuration
        /// </summary>
        [Preserve]
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public long Version{ get; }

        /// <summary>
        /// Date of last update. Only supported for version &gt;&#x3D; 4.
        /// </summary>
        [Preserve]
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt{ get; }

        /// <summary>
        /// Date of creation. Only supported for version &gt;&#x3D; 4.
        /// </summary>
        [Preserve]
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTime CreatedAt{ get; }

        /// <summary>
        /// Formats a BuildConfigurationListItem into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            serializedModel += "id," + Id.ToString() + ",";
            if (Name != null)
            {
                serializedModel += "name," + Name + ",";
            }
            serializedModel += "buildID," + BuildID.ToString() + ",";
            if (BuildName != null)
            {
                serializedModel += "buildName," + BuildName + ",";
            }
            if (FleetID != null)
            {
                serializedModel += "fleetID," + FleetID + ",";
            }
            if (FleetName != null)
            {
                serializedModel += "fleetName," + FleetName + ",";
            }
            serializedModel += "version," + Version.ToString() + ",";
            if (UpdatedAt != null)
            {
                serializedModel += "updatedAt," + UpdatedAt.ToString() + ",";
            }
            if (CreatedAt != null)
            {
                serializedModel += "createdAt," + CreatedAt.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a BuildConfigurationListItem as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            var idStringValue = Id.ToString();
            dictionary.Add("id", idStringValue);

            if (Name != null)
            {
                var nameStringValue = Name.ToString();
                dictionary.Add("name", nameStringValue);
            }

            var buildIDStringValue = BuildID.ToString();
            dictionary.Add("buildID", buildIDStringValue);

            if (BuildName != null)
            {
                var buildNameStringValue = BuildName.ToString();
                dictionary.Add("buildName", buildNameStringValue);
            }

            if (FleetID != null)
            {
                var fleetIDStringValue = FleetID.ToString();
                dictionary.Add("fleetID", fleetIDStringValue);
            }

            if (FleetName != null)
            {
                var fleetNameStringValue = FleetName.ToString();
                dictionary.Add("fleetName", fleetNameStringValue);
            }

            var versionStringValue = Version.ToString();
            dictionary.Add("version", versionStringValue);

            if (UpdatedAt != null)
            {
                var updatedAtStringValue = UpdatedAt.ToString();
                dictionary.Add("updatedAt", updatedAtStringValue);
            }

            if (CreatedAt != null)
            {
                var createdAtStringValue = CreatedAt.ToString();
                dictionary.Add("createdAt", createdAtStringValue);
            }

            return dictionary;
        }
    }
}
