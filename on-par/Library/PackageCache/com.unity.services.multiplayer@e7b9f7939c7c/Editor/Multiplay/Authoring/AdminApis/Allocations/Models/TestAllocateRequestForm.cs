//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Allocations.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Allocations.Models
{
    /// <summary>
    /// Multipart-form request to process a test allocation. The form size is capped at 32Mb to prevent overloading.
    /// </summary>
    [Preserve]
    [DataContract(Name = "Test_Allocate_Request_Form")]
    internal class TestAllocateRequestForm
    {
        /// <summary>
        /// Multipart-form request to process a test allocation. The form size is capped at 32Mb to prevent overloading.
        /// </summary>
        /// <param name="regionId">ID of the Region.</param>
        /// <param name="buildConfigurationId">ID of the build configuration.</param>
        /// <param name="allocationId">The uuid for the allocation. If a new UUID is specified, it will be used to trigger a new allocation associated with that UUID that can be referenced later to check the status of said allocation. If an allocation with this UUID exists, no action is taken and the HREF for the existing allocation is returned. </param>
        /// <param name="restart">Flag whether game server requires restart or not.</param>
        /// <param name="payload">The payload containing additional game configuration to be used on allocation. Replaces the X-Enable-Payload flag in older APIs. </param>
        [Preserve]
        public TestAllocateRequestForm(System.Guid regionId, long buildConfigurationId, System.Guid allocationId, bool restart = default, string payload = default)
        {
            RegionId = regionId;
            BuildConfigurationId = buildConfigurationId;
            AllocationId = allocationId;
            Restart = restart;
            Payload = payload;
        }

        /// <summary>
        /// ID of the Region.
        /// </summary>
        [Preserve]
        [DataMember(Name = "regionId", IsRequired = true, EmitDefaultValue = true)]
        public System.Guid RegionId{ get; }

        /// <summary>
        /// ID of the build configuration.
        /// </summary>
        [Preserve]
        [DataMember(Name = "buildConfigurationId", IsRequired = true, EmitDefaultValue = true)]
        public long BuildConfigurationId{ get; }

        /// <summary>
        /// The uuid for the allocation. If a new UUID is specified, it will be used to trigger a new allocation associated with that UUID that can be referenced later to check the status of said allocation. If an allocation with this UUID exists, no action is taken and the HREF for the existing allocation is returned.
        /// </summary>
        [Preserve]
        [DataMember(Name = "allocationId", IsRequired = true, EmitDefaultValue = true)]
        public System.Guid AllocationId{ get; }

        /// <summary>
        /// Flag whether game server requires restart or not.
        /// </summary>
        [Preserve]
        [DataMember(Name = "restart", EmitDefaultValue = true)]
        public bool Restart{ get; }

        /// <summary>
        /// The payload containing additional game configuration to be used on allocation. Replaces the X-Enable-Payload flag in older APIs.
        /// </summary>
        [Preserve]
        [DataMember(Name = "payload", EmitDefaultValue = false)]
        public string Payload{ get; }

        /// <summary>
        /// Formats a TestAllocateRequestForm into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (RegionId != null)
            {
                serializedModel += "regionId," + RegionId + ",";
            }
            serializedModel += "buildConfigurationId," + BuildConfigurationId.ToString() + ",";
            if (AllocationId != null)
            {
                serializedModel += "allocationId," + AllocationId + ",";
            }
            serializedModel += "restart," + Restart.ToString() + ",";
            if (Payload != null)
            {
                serializedModel += "payload," + Payload;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a TestAllocateRequestForm as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (RegionId != null)
            {
                var regionIdStringValue = RegionId.ToString();
                dictionary.Add("regionId", regionIdStringValue);
            }

            var buildConfigurationIdStringValue = BuildConfigurationId.ToString();
            dictionary.Add("buildConfigurationId", buildConfigurationIdStringValue);

            if (AllocationId != null)
            {
                var allocationIdStringValue = AllocationId.ToString();
                dictionary.Add("allocationId", allocationIdStringValue);
            }

            var restartStringValue = Restart.ToString();
            dictionary.Add("restart", restartStringValue);

            if (Payload != null)
            {
                var payloadStringValue = Payload.ToString();
                dictionary.Add("payload", payloadStringValue);
            }

            return dictionary;
        }
    }
}
