//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Models
{
    /// <summary>
    /// A usage setting associated with the fleet.
    /// </summary>
    [Preserve]
    [DataContract(Name = "Fleet_Usage_Setting")]
    internal class FleetUsageSetting
    {
        /// <summary>
        /// A usage setting associated with the fleet.
        /// </summary>
        /// <param name="hardwareType">The hardware type of a machine.</param>
        /// <param name="fleetUsageID">ID of the Fleet Usage.</param>
        /// <param name="machineType">Machine type to be associated with these setting.   * For &#x60;CLOUD&#x60; setting: In most cases, the only machine type available for your fleet is GCP-N2.   * For &#x60;METAL&#x60; setting: Please omit this field. All metal machines will be using the same setting, regardless of its type. </param>
        /// <param name="speed">Maximum speed to be allocated per server in MHz.   * For &#x60;CLOUD&#x60; setting: This field is not available, please omit.   * For &#x60;METAL&#x60; setting: This is a required field. Minimum speed is 100 MHz. </param>
        /// <param name="memory">Maximum RAM to be allocated per server in MB.   * For &#x60;CLOUD&#x60; setting: This field is not available, please omit.   * For &#x60;METAL&#x60; setting: This is a required field. Minimum RAM is 100 MB. </param>
        /// <param name="maxServersPerMachine">Maximum number of servers to be allocated per machine.   * For &#x60;CLOUD&#x60; setting: This is a required field.   * For &#x60;METAL&#x60; setting: This is an optional field. </param>
        /// <param name="maxServersPerCore">Maximum number of servers to be allocated per physical CPU core.   * For &#x60;CLOUD&#x60; setting: This field is not available, please omit.   * For &#x60;METAL&#x60; setting: This is an optional field. </param>
        [Preserve]
        public FleetUsageSetting(HardwareTypeOptions hardwareType, long fleetUsageID = default, string machineType = default, long speed = default, long memory = default, long maxServersPerMachine = default, long maxServersPerCore = default)
        {
            FleetUsageID = fleetUsageID;
            HardwareType = hardwareType;
            MachineType = machineType;
            Speed = speed;
            Memory = memory;
            MaxServersPerMachine = maxServersPerMachine;
            MaxServersPerCore = maxServersPerCore;
        }

        /// <summary>
        /// ID of the Fleet Usage.
        /// </summary>
        [Preserve]
        [DataMember(Name = "fleetUsageID", EmitDefaultValue = false)]
        public long FleetUsageID{ get; }
        
        /// <summary>
        /// The hardware type of a machine.
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "hardwareType", IsRequired = true, EmitDefaultValue = true)]
        public HardwareTypeOptions HardwareType{ get; }
        
        /// <summary>
        /// Machine type to be associated with these setting.   * For &#x60;CLOUD&#x60; setting: In most cases, the only machine type available for your fleet is GCP-N2.   * For &#x60;METAL&#x60; setting: Please omit this field. All metal machines will be using the same setting, regardless of its type. 
        /// </summary>
        [Preserve]
        [DataMember(Name = "machineType", EmitDefaultValue = false)]
        public string MachineType{ get; }
        
        /// <summary>
        /// Maximum speed to be allocated per server in MHz.   * For &#x60;CLOUD&#x60; setting: This field is not available, please omit.   * For &#x60;METAL&#x60; setting: This is a required field. Minimum speed is 100 MHz. 
        /// </summary>
        [Preserve]
        [DataMember(Name = "speed", EmitDefaultValue = false)]
        public long Speed{ get; }
        
        /// <summary>
        /// Maximum RAM to be allocated per server in MB.   * For &#x60;CLOUD&#x60; setting: This field is not available, please omit.   * For &#x60;METAL&#x60; setting: This is a required field. Minimum RAM is 100 MB. 
        /// </summary>
        [Preserve]
        [DataMember(Name = "memory", EmitDefaultValue = false)]
        public long Memory{ get; }
        
        /// <summary>
        /// Maximum number of servers to be allocated per machine.   * For &#x60;CLOUD&#x60; setting: This is a required field.   * For &#x60;METAL&#x60; setting: This is an optional field. 
        /// </summary>
        [Preserve]
        [DataMember(Name = "maxServersPerMachine", EmitDefaultValue = false)]
        public long MaxServersPerMachine{ get; }
        
        /// <summary>
        /// Maximum number of servers to be allocated per physical CPU core.   * For &#x60;CLOUD&#x60; setting: This field is not available, please omit.   * For &#x60;METAL&#x60; setting: This is an optional field. 
        /// </summary>
        [Preserve]
        [DataMember(Name = "maxServersPerCore", EmitDefaultValue = false)]
        public long MaxServersPerCore{ get; }
    
        /// <summary>
        /// The hardware type of a machine.
        /// </summary>
        /// <value>The hardware type of a machine.</value>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HardwareTypeOptions
        {
            /// <summary>
            /// Enum CLOUD for value: CLOUD
            /// </summary>
            [EnumMember(Value = "CLOUD")]
            CLOUD = 1,
            /// <summary>
            /// Enum METAL for value: METAL
            /// </summary>
            [EnumMember(Value = "METAL")]
            METAL = 2
        }

        /// <summary>
        /// Formats a FleetUsageSetting into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            serializedModel += "fleetUsageID," + FleetUsageID.ToString() + ",";
            serializedModel += "hardwareType," + HardwareType + ",";
            if (MachineType != null)
            {
                serializedModel += "machineType," + MachineType + ",";
            }
            serializedModel += "speed," + Speed.ToString() + ",";
            serializedModel += "memory," + Memory.ToString() + ",";
            serializedModel += "maxServersPerMachine," + MaxServersPerMachine.ToString() + ",";
            serializedModel += "maxServersPerCore," + MaxServersPerCore.ToString();
            return serializedModel;
        }

        /// <summary>
        /// Returns a FleetUsageSetting as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            var fleetUsageIDStringValue = FleetUsageID.ToString();
            dictionary.Add("fleetUsageID", fleetUsageIDStringValue);
            
            var hardwareTypeStringValue = HardwareType.ToString();
            dictionary.Add("hardwareType", hardwareTypeStringValue);
            
            if (MachineType != null)
            {
                var machineTypeStringValue = MachineType.ToString();
                dictionary.Add("machineType", machineTypeStringValue);
            }
            
            var speedStringValue = Speed.ToString();
            dictionary.Add("speed", speedStringValue);
            
            var memoryStringValue = Memory.ToString();
            dictionary.Add("memory", memoryStringValue);
            
            var maxServersPerMachineStringValue = MaxServersPerMachine.ToString();
            dictionary.Add("maxServersPerMachine", maxServersPerMachineStringValue);
            
            var maxServersPerCoreStringValue = MaxServersPerCore.ToString();
            dictionary.Add("maxServersPerCore", maxServersPerCoreStringValue);
            
            return dictionary;
        }
    }
}
