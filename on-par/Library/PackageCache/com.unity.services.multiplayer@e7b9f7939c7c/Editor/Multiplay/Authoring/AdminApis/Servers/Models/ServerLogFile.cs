//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Servers.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Servers.Models
{
    /// <summary>
    /// A server log file.
    /// </summary>
    [Preserve]
    [DataContract(Name = "Server_Log_File")]
    internal class ServerLogFile
    {
        /// <summary>
        /// A server log file.
        /// </summary>
        /// <param name="file">Name of the log file.</param>
        /// <param name="size">Size of the log file (bytes).</param>
        /// <param name="lastModified">Last modification date of the log file.</param>
        /// <param name="downloadURL">Log file download URL</param>
        [Preserve]
        public ServerLogFile(string file, long size, DateTime lastModified, string downloadURL = default)
        {
            File = file;
            Size = size;
            DownloadURL = downloadURL;
            LastModified = lastModified;
        }

        /// <summary>
        /// Name of the log file.
        /// </summary>
        [Preserve]
        [DataMember(Name = "file", IsRequired = true, EmitDefaultValue = true)]
        public string File{ get; }

        /// <summary>
        /// Size of the log file (bytes).
        /// </summary>
        [Preserve]
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = true)]
        public long Size{ get; }

        /// <summary>
        /// Log file download URL
        /// </summary>
        [Preserve]
        [DataMember(Name = "downloadURL", EmitDefaultValue = false)]
        public string DownloadURL{ get; }

        /// <summary>
        /// Last modification date of the log file.
        /// </summary>
        [Preserve]
        [DataMember(Name = "lastModified", IsRequired = true, EmitDefaultValue = true)]
        public DateTime LastModified{ get; }

        /// <summary>
        /// Formats a ServerLogFile into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (File != null)
            {
                serializedModel += "file," + File + ",";
            }
            serializedModel += "size," + Size.ToString() + ",";
            if (DownloadURL != null)
            {
                serializedModel += "downloadURL," + DownloadURL + ",";
            }
            if (LastModified != null)
            {
                serializedModel += "lastModified," + LastModified.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a ServerLogFile as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (File != null)
            {
                var fileStringValue = File.ToString();
                dictionary.Add("file", fileStringValue);
            }

            var sizeStringValue = Size.ToString();
            dictionary.Add("size", sizeStringValue);

            if (DownloadURL != null)
            {
                var downloadURLStringValue = DownloadURL.ToString();
                dictionary.Add("downloadURL", downloadURLStringValue);
            }

            if (LastModified != null)
            {
                var lastModifiedStringValue = LastModified.ToString();
                dictionary.Add("lastModified", lastModifiedStringValue);
            }

            return dictionary;
        }
    }
}
