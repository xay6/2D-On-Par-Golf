//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Models
{
    /// <summary>
    /// A link to download a log file.
    /// </summary>
    [Preserve]
    [DataContract(Name = "multiplay.downloadLink.v1")]
    internal class MultiplayDownloadLinkV1
    {
        /// <summary>
        /// A link to download a log file.
        /// </summary>
        /// <param name="url">Log file download URL</param>
        [Preserve]
        public MultiplayDownloadLinkV1(string url)
        {
            Url = url;
        }

        /// <summary>
        /// Log file download URL
        /// </summary>
        [Preserve]
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url{ get; }

        /// <summary>
        /// Formats a MultiplayDownloadLinkV1 into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Url != null)
            {
                serializedModel += "url," + Url;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a MultiplayDownloadLinkV1 as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Url != null)
            {
                var urlStringValue = Url.ToString();
                dictionary.Add("url", urlStringValue);
            }

            return dictionary;
        }
    }
}
