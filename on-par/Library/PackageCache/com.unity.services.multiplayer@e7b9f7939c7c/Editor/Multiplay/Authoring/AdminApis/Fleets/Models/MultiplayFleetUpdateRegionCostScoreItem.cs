//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Models
{
    /// <summary>
    /// A single location with its cost score.
    /// </summary>
    [Preserve]
    [DataContract(Name = "multiplay.fleetUpdateRegionCostScoreItem")]
    internal class MultiplayFleetUpdateRegionCostScoreItem
    {
        /// <summary>
        /// A single location with its cost score.
        /// </summary>
        /// <param name="regionID">ID of the associated region.</param>
        /// <param name="regionLocationID">The Region Location ID (Do not confuse with the Region ID or Location ID).</param>
        /// <param name="providerType">The provider for which the cost score should be updated.</param>
        /// <param name="location">The location of the region.</param>
        /// <param name="costScore">Cost Score</param>
        [Preserve]
        public MultiplayFleetUpdateRegionCostScoreItem(System.Guid regionID, System.Guid regionLocationID, ProviderTypeOptions providerType, string location, long costScore)
        {
            RegionID = regionID;
            RegionLocationID = regionLocationID;
            ProviderType = providerType;
            Location = location;
            CostScore = costScore;
        }

        /// <summary>
        /// ID of the associated region.
        /// </summary>
        [Preserve]
        [DataMember(Name = "regionID", IsRequired = true, EmitDefaultValue = true)]
        public System.Guid RegionID{ get; }
        
        /// <summary>
        /// The Region Location ID (Do not confuse with the Region ID or Location ID).
        /// </summary>
        [Preserve]
        [DataMember(Name = "regionLocationID", IsRequired = true, EmitDefaultValue = true)]
        public System.Guid RegionLocationID{ get; }
        
        /// <summary>
        /// The provider for which the cost score should be updated.
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "providerType", IsRequired = true, EmitDefaultValue = true)]
        public ProviderTypeOptions ProviderType{ get; }
        
        /// <summary>
        /// The location of the region.
        /// </summary>
        [Preserve]
        [DataMember(Name = "location", IsRequired = true, EmitDefaultValue = true)]
        public string Location{ get; }
        
        /// <summary>
        /// Cost Score
        /// </summary>
        [Preserve]
        [DataMember(Name = "costScore", IsRequired = true, EmitDefaultValue = true)]
        public long CostScore{ get; }
    
        /// <summary>
        /// The provider for which the cost score should be updated.
        /// </summary>
        /// <value>The provider for which the cost score should be updated.</value>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProviderTypeOptions
        {
            /// <summary>
            /// Enum METAL for value: METAL
            /// </summary>
            [EnumMember(Value = "METAL")]
            METAL = 1,
            /// <summary>
            /// Enum AZURE for value: AZURE
            /// </summary>
            [EnumMember(Value = "AZURE")]
            AZURE = 2,
            /// <summary>
            /// Enum GCE for value: GCE
            /// </summary>
            [EnumMember(Value = "GCE")]
            GCE = 3,
            /// <summary>
            /// Enum AWS for value: AWS
            /// </summary>
            [EnumMember(Value = "AWS")]
            AWS = 4
        }

        /// <summary>
        /// Formats a MultiplayFleetUpdateRegionCostScoreItem into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (RegionID != null)
            {
                serializedModel += "regionID," + RegionID + ",";
            }
            if (RegionLocationID != null)
            {
                serializedModel += "regionLocationID," + RegionLocationID + ",";
            }
            serializedModel += "providerType," + ProviderType + ",";
            if (Location != null)
            {
                serializedModel += "location," + Location + ",";
            }
            serializedModel += "costScore," + CostScore.ToString();
            return serializedModel;
        }

        /// <summary>
        /// Returns a MultiplayFleetUpdateRegionCostScoreItem as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (RegionID != null)
            {
                var regionIDStringValue = RegionID.ToString();
                dictionary.Add("regionID", regionIDStringValue);
            }
            
            if (RegionLocationID != null)
            {
                var regionLocationIDStringValue = RegionLocationID.ToString();
                dictionary.Add("regionLocationID", regionLocationIDStringValue);
            }
            
            var providerTypeStringValue = ProviderType.ToString();
            dictionary.Add("providerType", providerTypeStringValue);
            
            if (Location != null)
            {
                var locationStringValue = Location.ToString();
                dictionary.Add("location", locationStringValue);
            }
            
            var costScoreStringValue = CostScore.ToString();
            dictionary.Add("costScore", costScoreStringValue);
            
            return dictionary;
        }
    }
}
