//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Models
{
    /// <summary>
    /// Newly added fleet region
    /// </summary>
    [Preserve]
    [DataContract(Name = "multiplay.addedRegion")]
    internal class MultiplayAddedRegion
    {
        /// <summary>
        /// Newly added fleet region
        /// </summary>
        /// <param name="id">ID of the fleet region.</param>
        /// <param name="regionID">ID of the associated region.</param>
        /// <param name="regionName">Name of the associated region.</param>
        /// <param name="minAvailableServers">Minimum number of servers to keep free for new game sessions.</param>
        /// <param name="maxServers">Maximum number of servers to host in the fleet region.</param>
        [Preserve]
        public MultiplayAddedRegion(System.Guid id, System.Guid regionID, string regionName, long minAvailableServers, long maxServers)
        {
            Id = id;
            RegionID = regionID;
            RegionName = regionName;
            MinAvailableServers = minAvailableServers;
            MaxServers = maxServers;
        }

        /// <summary>
        /// ID of the fleet region.
        /// </summary>
        [Preserve]
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public System.Guid Id{ get; }

        /// <summary>
        /// ID of the associated region.
        /// </summary>
        [Preserve]
        [DataMember(Name = "regionID", IsRequired = true, EmitDefaultValue = true)]
        public System.Guid RegionID{ get; }

        /// <summary>
        /// Name of the associated region.
        /// </summary>
        [Preserve]
        [DataMember(Name = "regionName", IsRequired = true, EmitDefaultValue = true)]
        public string RegionName{ get; }

        /// <summary>
        /// Minimum number of servers to keep free for new game sessions.
        /// </summary>
        [Preserve]
        [DataMember(Name = "minAvailableServers", IsRequired = true, EmitDefaultValue = true)]
        public long MinAvailableServers{ get; }

        /// <summary>
        /// Maximum number of servers to host in the fleet region.
        /// </summary>
        [Preserve]
        [DataMember(Name = "maxServers", IsRequired = true, EmitDefaultValue = true)]
        public long MaxServers{ get; }

        /// <summary>
        /// Formats a MultiplayAddedRegion into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Id != null)
            {
                serializedModel += "id," + Id + ",";
            }
            if (RegionID != null)
            {
                serializedModel += "regionID," + RegionID + ",";
            }
            if (RegionName != null)
            {
                serializedModel += "regionName," + RegionName + ",";
            }
            serializedModel += "minAvailableServers," + MinAvailableServers.ToString() + ",";
            serializedModel += "maxServers," + MaxServers.ToString();
            return serializedModel;
        }

        /// <summary>
        /// Returns a MultiplayAddedRegion as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Id != null)
            {
                var idStringValue = Id.ToString();
                dictionary.Add("id", idStringValue);
            }

            if (RegionID != null)
            {
                var regionIDStringValue = RegionID.ToString();
                dictionary.Add("regionID", regionIDStringValue);
            }

            if (RegionName != null)
            {
                var regionNameStringValue = RegionName.ToString();
                dictionary.Add("regionName", regionNameStringValue);
            }

            var minAvailableServersStringValue = MinAvailableServers.ToString();
            dictionary.Add("minAvailableServers", minAvailableServersStringValue);

            var maxServersStringValue = MaxServers.ToString();
            dictionary.Add("maxServers", maxServersStringValue);

            return dictionary;
        }
    }
}
