//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System.Threading.Tasks;
using System.Collections.Generic;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Models;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Logs;

namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Apis.Logs
{
    /// <summary>
    /// Interface for the LogsApiClient
    /// </summary>
    internal interface ILogsApiClient
    {
            /// <summary>
            /// Async Operation.
            /// Get a signed URL to download the requested source file from the server.
            /// </summary>
            /// <param name="request">Request object for DownloadLink.</param>
            /// <param name="operationConfiguration">Configuration for DownloadLink.</param>
            /// <returns>Task for a Response object containing status code, headers, and LogFileLink object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LogFileLink>> DownloadLinkAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Logs.DownloadLinkRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get logging status.
            /// </summary>
            /// <param name="request">Request object for GetLogStatus.</param>
            /// <param name="operationConfiguration">Configuration for GetLogStatus.</param>
            /// <returns>Task for a Response object containing status code, headers, and LogStatusResponse object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LogStatusResponse>> GetLogStatusAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Logs.GetLogStatusRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Files Filters.
            /// </summary>
            /// <param name="request">Request object for LogsFiltersFiles.</param>
            /// <param name="operationConfiguration">Configuration for LogsFiltersFiles.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;FilterableLogSourceFile&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<FilterableLogSourceFile>>> LogsFiltersFilesAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Logs.LogsFiltersFilesRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Fleets Filters.
            /// </summary>
            /// <param name="request">Request object for LogsFiltersFleets.</param>
            /// <param name="operationConfiguration">Configuration for LogsFiltersFleets.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;LogsFiltersFleet&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<LogsFiltersFleet>>> LogsFiltersFleetsAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Logs.LogsFiltersFleetsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Servers Filters.
            /// </summary>
            /// <param name="request">Request object for LogsFiltersServers.</param>
            /// <param name="operationConfiguration">Configuration for LogsFiltersServers.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;string&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<string>>> LogsFiltersServersAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Logs.LogsFiltersServersRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Servers for a Fleet.
            /// </summary>
            /// <param name="request">Request object for LogsFiltersServersForFleet.</param>
            /// <param name="operationConfiguration">Configuration for LogsFiltersServersForFleet.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;string&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<string>>> LogsFiltersServersForFleetAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Logs.LogsFiltersServersForFleetRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Current Log Usage.
            /// </summary>
            /// <param name="request">Request object for LogsGetCurrentUsage.</param>
            /// <param name="operationConfiguration">Configuration for LogsGetCurrentUsage.</param>
            /// <returns>Task for a Response object containing status code, headers, and LogsUsageResponse object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LogsUsageResponse>> LogsGetCurrentUsageAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Logs.LogsGetCurrentUsageRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Search Logs.
            /// </summary>
            /// <param name="request">Request object for SearchLogs.</param>
            /// <param name="operationConfiguration">Configuration for SearchLogs.</param>
            /// <returns>Task for a Response object containing status code, headers, and LogSearchResponse object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LogSearchResponse>> SearchLogsAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Logs.SearchLogsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Set logging status.
            /// </summary>
            /// <param name="request">Request object for SetLogStatus.</param>
            /// <param name="operationConfiguration">Configuration for SetLogStatus.</param>
            /// <returns>Task for a Response object containing status code, headers, and LogStatusResponse object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<LogStatusResponse>> SetLogStatusAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Logs.SetLogStatusRequest request, Configuration operationConfiguration = null);

    }

    ///<inheritdoc cref="ILogsApiClient"/>
    internal class LogsApiClient : BaseApiClient, ILogsApiClient
    {
        private const int _baseTimeout = 10;
        private Configuration _configuration;
        /// <summary>
        /// Accessor for the client configuration object. This returns a merge
        /// between the current configuration and the global configuration to
        /// ensure the correct combination of headers and a base path (if it is
        /// set) are returned.
        /// </summary>
        public Configuration Configuration
        {
            get {
                // We return a merge between the current configuration and the
                // global configuration to ensure we have the correct
                // combination of headers and a base path (if it is set).
                Configuration globalConfiguration = new Configuration("https://services.unity.com", 10, 4, null);
                return Configuration.MergeConfigurations(_configuration, globalConfiguration);
            }
            set { _configuration = value; }
        }

        /// <summary>
        /// LogsApiClient Constructor.
        /// </summary>
        /// <param name="httpClient">The HttpClient for LogsApiClient.</param>
        /// <param name="configuration"> LogsApiClient Configuration object.</param>
        public LogsApiClient(IHttpClient httpClient,
            Configuration configuration = null) : base(httpClient)
        {
            // We don't need to worry about the configuration being null at
            // this stage, we will check this in the accessor.
            _configuration = configuration;


        }


        /// <summary>
        /// Async Operation.
        /// Get a signed URL to download the requested source file from the server.
        /// </summary>
        /// <param name="request">Request object for DownloadLink.</param>
        /// <param name="operationConfiguration">Configuration for DownloadLink.</param>
        /// <returns>Task for a Response object containing status code, headers, and LogFileLink object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LogFileLink>> DownloadLinkAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Logs.DownloadLinkRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LogFileLink)   },{"400", typeof(SearchLogs400Response)   },{"401", typeof(SearchLogs401Response)   },{"403", typeof(SearchLogs403Response)   },{"404", typeof(SearchLogs404Response)   },{"429", typeof(SearchLogs429Response)   },{"500", typeof(SearchLogs500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LogFileLink>(response, statusCodeToTypeMap);
            return new Response<LogFileLink>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get logging status.
        /// </summary>
        /// <param name="request">Request object for GetLogStatus.</param>
        /// <param name="operationConfiguration">Configuration for GetLogStatus.</param>
        /// <returns>Task for a Response object containing status code, headers, and LogStatusResponse object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LogStatusResponse>> GetLogStatusAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Logs.GetLogStatusRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LogStatusResponse)   },{"400", typeof(SearchLogs400Response)   },{"401", typeof(SearchLogs401Response)   },{"403", typeof(SearchLogs403Response)   },{"404", typeof(SearchLogs404Response)   },{"429", typeof(SearchLogs429Response)   },{"500", typeof(SearchLogs500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LogStatusResponse>(response, statusCodeToTypeMap);
            return new Response<LogStatusResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Files Filters.
        /// </summary>
        /// <param name="request">Request object for LogsFiltersFiles.</param>
        /// <param name="operationConfiguration">Configuration for LogsFiltersFiles.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;FilterableLogSourceFile&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<FilterableLogSourceFile>>> LogsFiltersFilesAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Logs.LogsFiltersFilesRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<FilterableLogSourceFile>)   },{"400", typeof(SearchLogs400Response)   },{"401", typeof(SearchLogs401Response)   },{"403", typeof(SearchLogs403Response)   },{"404", typeof(SearchLogs404Response)   },{"429", typeof(SearchLogs429Response)   },{"500", typeof(SearchLogs500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<FilterableLogSourceFile>>(response, statusCodeToTypeMap);
            return new Response<List<FilterableLogSourceFile>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Fleets Filters.
        /// </summary>
        /// <param name="request">Request object for LogsFiltersFleets.</param>
        /// <param name="operationConfiguration">Configuration for LogsFiltersFleets.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;LogsFiltersFleet&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<LogsFiltersFleet>>> LogsFiltersFleetsAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Logs.LogsFiltersFleetsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<LogsFiltersFleet>)   },{"400", typeof(SearchLogs400Response)   },{"401", typeof(SearchLogs401Response)   },{"403", typeof(SearchLogs403Response)   },{"404", typeof(SearchLogs404Response)   },{"429", typeof(SearchLogs429Response)   },{"500", typeof(SearchLogs500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<LogsFiltersFleet>>(response, statusCodeToTypeMap);
            return new Response<List<LogsFiltersFleet>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Servers Filters.
        /// </summary>
        /// <param name="request">Request object for LogsFiltersServers.</param>
        /// <param name="operationConfiguration">Configuration for LogsFiltersServers.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;string&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<string>>> LogsFiltersServersAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Logs.LogsFiltersServersRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<string>)   },{"400", typeof(SearchLogs400Response)   },{"401", typeof(SearchLogs401Response)   },{"403", typeof(SearchLogs403Response)   },{"404", typeof(SearchLogs404Response)   },{"429", typeof(SearchLogs429Response)   },{"500", typeof(SearchLogs500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<string>>(response, statusCodeToTypeMap);
            return new Response<List<string>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Servers for a Fleet.
        /// </summary>
        /// <param name="request">Request object for LogsFiltersServersForFleet.</param>
        /// <param name="operationConfiguration">Configuration for LogsFiltersServersForFleet.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;string&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<string>>> LogsFiltersServersForFleetAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Logs.LogsFiltersServersForFleetRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<string>)   },{"400", typeof(SearchLogs400Response)   },{"401", typeof(SearchLogs401Response)   },{"403", typeof(SearchLogs403Response)   },{"404", typeof(SearchLogs404Response)   },{"429", typeof(SearchLogs429Response)   },{"500", typeof(SearchLogs500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<string>>(response, statusCodeToTypeMap);
            return new Response<List<string>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Current Log Usage.
        /// </summary>
        /// <param name="request">Request object for LogsGetCurrentUsage.</param>
        /// <param name="operationConfiguration">Configuration for LogsGetCurrentUsage.</param>
        /// <returns>Task for a Response object containing status code, headers, and LogsUsageResponse object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LogsUsageResponse>> LogsGetCurrentUsageAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Logs.LogsGetCurrentUsageRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LogsUsageResponse)   },{"400", typeof(SearchLogs400Response)   },{"401", typeof(SearchLogs401Response)   },{"403", typeof(SearchLogs403Response)   },{"404", typeof(SearchLogs404Response)   },{"429", typeof(SearchLogs429Response)   },{"500", typeof(SearchLogs500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LogsUsageResponse>(response, statusCodeToTypeMap);
            return new Response<LogsUsageResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Search Logs.
        /// </summary>
        /// <param name="request">Request object for SearchLogs.</param>
        /// <param name="operationConfiguration">Configuration for SearchLogs.</param>
        /// <returns>Task for a Response object containing status code, headers, and LogSearchResponse object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LogSearchResponse>> SearchLogsAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Logs.SearchLogsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LogSearchResponse)   },{"400", typeof(SearchLogs400Response)   },{"401", typeof(SearchLogs401Response)   },{"403", typeof(SearchLogs403Response)   },{"404", typeof(SearchLogs404Response)   },{"429", typeof(SearchLogs429Response)   },{"500", typeof(SearchLogs500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LogSearchResponse>(response, statusCodeToTypeMap);
            return new Response<LogSearchResponse>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Set logging status.
        /// </summary>
        /// <param name="request">Request object for SetLogStatus.</param>
        /// <param name="operationConfiguration">Configuration for SetLogStatus.</param>
        /// <returns>Task for a Response object containing status code, headers, and LogStatusResponse object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<LogStatusResponse>> SetLogStatusAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Logs.SetLogStatusRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(LogStatusResponse)   },{"400", typeof(SearchLogs400Response)   },{"401", typeof(SearchLogs401Response)   },{"403", typeof(SearchLogs403Response)   },{"404", typeof(SearchLogs404Response)   },{"429", typeof(SearchLogs429Response)   },{"500", typeof(SearchLogs500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<LogStatusResponse>(response, statusCodeToTypeMap);
            return new Response<LogStatusResponse>(response, handledResponse);
        }

    }
}
