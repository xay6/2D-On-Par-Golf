//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Models
{
    /// <summary>
    /// Response for log status requests indicating whether or not logging is enabled
    /// </summary>
    [Preserve]
    [DataContract(Name = "multiplay.logStatus.v1")]
    internal class MultiplayLogStatusV1
    {
        /// <summary>
        /// Response for log status requests indicating whether or not logging is enabled
        /// </summary>
        /// <param name="status">Flag denoting whether or not logging status is enabled, disabled or the limit is reached</param>
        [Preserve]
        public MultiplayLogStatusV1(StatusOptions status)
        {
            Status = status;
        }

        /// <summary>
        /// Flag denoting whether or not logging status is enabled, disabled or the limit is reached
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusOptions Status{ get; }

        /// <summary>
        /// Flag denoting whether or not logging status is enabled, disabled or the limit is reached
        /// </summary>
        /// <value>Flag denoting whether or not logging status is enabled, disabled or the limit is reached</value>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusOptions
        {
            /// <summary>
            /// Enum ENABLED for value: ENABLED
            /// </summary>
            [EnumMember(Value = "ENABLED")]
            ENABLED = 1,
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 2,
            /// <summary>
            /// Enum LIMITREACHED for value: LIMIT_REACHED
            /// </summary>
            [EnumMember(Value = "LIMIT_REACHED")]
            LIMITREACHED = 3
        }

        /// <summary>
        /// Formats a MultiplayLogStatusV1 into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            serializedModel += "status," + Status;
            return serializedModel;
        }

        /// <summary>
        /// Returns a MultiplayLogStatusV1 as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            var statusStringValue = Status.ToString();
            dictionary.Add("status", statusStringValue);

            return dictionary;
        }
    }
}
