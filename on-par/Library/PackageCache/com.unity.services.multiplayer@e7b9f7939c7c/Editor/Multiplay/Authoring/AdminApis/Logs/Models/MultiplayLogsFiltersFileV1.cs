//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Models
{
    /// <summary>
    /// A single log source file that can be used for filtering.
    /// </summary>
    [Preserve]
    [DataContract(Name = "multiplay.logsFiltersFile.v1")]
    internal class MultiplayLogsFiltersFileV1
    {
        /// <summary>
        /// A single log source file that can be used for filtering.
        /// </summary>
        /// <param name="source">The full file path</param>
        /// <param name="name">The file name</param>
        [Preserve]
        public MultiplayLogsFiltersFileV1(string source, string name)
        {
            Source = source;
            Name = name;
        }

        /// <summary>
        /// The full file path
        /// </summary>
        [Preserve]
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = true)]
        public string Source{ get; }

        /// <summary>
        /// The file name
        /// </summary>
        [Preserve]
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name{ get; }

        /// <summary>
        /// Formats a MultiplayLogsFiltersFileV1 into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Source != null)
            {
                serializedModel += "source," + Source + ",";
            }
            if (Name != null)
            {
                serializedModel += "name," + Name;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a MultiplayLogsFiltersFileV1 as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Source != null)
            {
                var sourceStringValue = Source.ToString();
                dictionary.Add("source", sourceStringValue);
            }

            if (Name != null)
            {
                var nameStringValue = Name.ToString();
                dictionary.Add("name", nameStringValue);
            }

            return dictionary;
        }
    }
}
