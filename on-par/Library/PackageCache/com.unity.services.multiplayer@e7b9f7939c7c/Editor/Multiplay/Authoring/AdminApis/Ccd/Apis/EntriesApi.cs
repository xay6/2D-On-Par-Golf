//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System.Threading.Tasks;
using System.Collections.Generic;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Models;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries;

namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Apis.Entries
{
    /// <summary>
    /// Interface for the EntriesApiClient
    /// </summary>
    internal interface IEntriesApiClient
    {
            /// <summary>
            /// Async Operation.
            /// Create entry.
            /// </summary>
            /// <param name="request">Request object for CreateEntry.</param>
            /// <param name="operationConfiguration">Configuration for CreateEntry.</param>
            /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> CreateEntryAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.CreateEntryRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Create entry.
            /// </summary>
            /// <param name="request">Request object for CreateEntryEnv.</param>
            /// <param name="operationConfiguration">Configuration for CreateEntryEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> CreateEntryEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.CreateEntryEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Batch Create or Update Entries.
            /// </summary>
            /// <param name="request">Request object for CreateOrUpdateEntryBatch.</param>
            /// <param name="operationConfiguration">Configuration for CreateOrUpdateEntryBatch.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;CreateOrUpdateEntryBatch200ResponseInner&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<CreateOrUpdateEntryBatch200ResponseInner>>> CreateOrUpdateEntryBatchAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.CreateOrUpdateEntryBatchRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Batch Create or Update Entries.
            /// </summary>
            /// <param name="request">Request object for CreateOrUpdateEntryBatchEnv.</param>
            /// <param name="operationConfiguration">Configuration for CreateOrUpdateEntryBatchEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;CreateOrUpdateEntryBatch200ResponseInner&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<CreateOrUpdateEntryBatch200ResponseInner>>> CreateOrUpdateEntryBatchEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.CreateOrUpdateEntryBatchEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Create or update entry by path.
            /// </summary>
            /// <param name="request">Request object for CreateOrUpdateEntryByPath.</param>
            /// <param name="operationConfiguration">Configuration for CreateOrUpdateEntryByPath.</param>
            /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> CreateOrUpdateEntryByPathAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.CreateOrUpdateEntryByPathRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Create or update entry by path.
            /// </summary>
            /// <param name="request">Request object for CreateOrUpdateEntryByPathEnv.</param>
            /// <param name="operationConfiguration">Configuration for CreateOrUpdateEntryByPathEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> CreateOrUpdateEntryByPathEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.CreateOrUpdateEntryByPathEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Delete entry.
            /// </summary>
            /// <param name="request">Request object for DeleteEntry.</param>
            /// <param name="operationConfiguration">Configuration for DeleteEntry.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> DeleteEntryAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.DeleteEntryRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Batch delete entries.
            /// </summary>
            /// <param name="request">Request object for DeleteEntryBatch.</param>
            /// <param name="operationConfiguration">Configuration for DeleteEntryBatch.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> DeleteEntryBatchAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.DeleteEntryBatchRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Batch delete entries.
            /// </summary>
            /// <param name="request">Request object for DeleteEntryBatchEnv.</param>
            /// <param name="operationConfiguration">Configuration for DeleteEntryBatchEnv.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> DeleteEntryBatchEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.DeleteEntryBatchEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Delete entry.
            /// </summary>
            /// <param name="request">Request object for DeleteEntryEnv.</param>
            /// <param name="operationConfiguration">Configuration for DeleteEntryEnv.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> DeleteEntryEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.DeleteEntryEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get entries for bucket.
            /// </summary>
            /// <param name="request">Request object for GetEntries.</param>
            /// <param name="operationConfiguration">Configuration for GetEntries.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;CreateOrUpdateEntryBatch200ResponseInner&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<CreateOrUpdateEntryBatch200ResponseInner>>> GetEntriesAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.GetEntriesRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get entries for bucket.
            /// </summary>
            /// <param name="request">Request object for GetEntriesEnv.</param>
            /// <param name="operationConfiguration">Configuration for GetEntriesEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;CreateOrUpdateEntryBatch200ResponseInner&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<CreateOrUpdateEntryBatch200ResponseInner>>> GetEntriesEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.GetEntriesEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get entry.
            /// </summary>
            /// <param name="request">Request object for GetEntry.</param>
            /// <param name="operationConfiguration">Configuration for GetEntry.</param>
            /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> GetEntryAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.GetEntryRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get entry by path.
            /// </summary>
            /// <param name="request">Request object for GetEntryByPath.</param>
            /// <param name="operationConfiguration">Configuration for GetEntryByPath.</param>
            /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> GetEntryByPathAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.GetEntryByPathRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get entry by path.
            /// </summary>
            /// <param name="request">Request object for GetEntryByPathEnv.</param>
            /// <param name="operationConfiguration">Configuration for GetEntryByPathEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> GetEntryByPathEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.GetEntryByPathEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get entry.
            /// </summary>
            /// <param name="request">Request object for GetEntryEnv.</param>
            /// <param name="operationConfiguration">Configuration for GetEntryEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> GetEntryEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.GetEntryEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get entry version.
            /// </summary>
            /// <param name="request">Request object for GetEntryVersion.</param>
            /// <param name="operationConfiguration">Configuration for GetEntryVersion.</param>
            /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> GetEntryVersionAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.GetEntryVersionRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get entry version.
            /// </summary>
            /// <param name="request">Request object for GetEntryVersionEnv.</param>
            /// <param name="operationConfiguration">Configuration for GetEntryVersionEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> GetEntryVersionEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.GetEntryVersionEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get entry versions.
            /// </summary>
            /// <param name="request">Request object for GetEntryVersions.</param>
            /// <param name="operationConfiguration">Configuration for GetEntryVersions.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;GetEntryVersions200ResponseInner&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<GetEntryVersions200ResponseInner>>> GetEntryVersionsAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.GetEntryVersionsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get entry versions.
            /// </summary>
            /// <param name="request">Request object for GetEntryVersionsEnv.</param>
            /// <param name="operationConfiguration">Configuration for GetEntryVersionsEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;GetEntryVersions200ResponseInner&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<GetEntryVersions200ResponseInner>>> GetEntryVersionsEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.GetEntryVersionsEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Update entry.
            /// </summary>
            /// <param name="request">Request object for UpdateEntry.</param>
            /// <param name="operationConfiguration">Configuration for UpdateEntry.</param>
            /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> UpdateEntryAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.UpdateEntryRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Update entry by path.
            /// </summary>
            /// <param name="request">Request object for UpdateEntryByPath.</param>
            /// <param name="operationConfiguration">Configuration for UpdateEntryByPath.</param>
            /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> UpdateEntryByPathAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.UpdateEntryByPathRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Update entry by path.
            /// </summary>
            /// <param name="request">Request object for UpdateEntryByPathEnv.</param>
            /// <param name="operationConfiguration">Configuration for UpdateEntryByPathEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> UpdateEntryByPathEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.UpdateEntryByPathEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Update entry.
            /// </summary>
            /// <param name="request">Request object for UpdateEntryEnv.</param>
            /// <param name="operationConfiguration">Configuration for UpdateEntryEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> UpdateEntryEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.UpdateEntryEnvRequest request, Configuration operationConfiguration = null);

    }

    ///<inheritdoc cref="IEntriesApiClient"/>
    internal class EntriesApiClient : BaseApiClient, IEntriesApiClient
    {
        private const int _baseTimeout = 10;
        private Configuration _configuration;
        /// <summary>
        /// Accessor for the client configuration object. This returns a merge
        /// between the current configuration and the global configuration to
        /// ensure the correct combination of headers and a base path (if it is
        /// set) are returned.
        /// </summary>
        public Configuration Configuration
        {
            get {
                // We return a merge between the current configuration and the
                // global configuration to ensure we have the correct
                // combination of headers and a base path (if it is set).
                Configuration globalConfiguration = new Configuration("https://services.unity.com", 10, 4, null);
                return Configuration.MergeConfigurations(_configuration, globalConfiguration);
            }
            set { _configuration = value; }
        }

        /// <summary>
        /// EntriesApiClient Constructor.
        /// </summary>
        /// <param name="httpClient">The HttpClient for EntriesApiClient.</param>
        /// <param name="configuration"> EntriesApiClient Configuration object.</param>
        public EntriesApiClient(IHttpClient httpClient,
            Configuration configuration = null) : base(httpClient)
        {
            // We don't need to worry about the configuration being null at
            // this stage, we will check this in the accessor.
            _configuration = configuration;


        }


        /// <summary>
        /// Async Operation.
        /// Create entry.
        /// </summary>
        /// <param name="request">Request object for CreateEntry.</param>
        /// <param name="operationConfiguration">Configuration for CreateEntry.</param>
        /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> CreateEntryAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.CreateEntryRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CreateOrUpdateEntryBatch200ResponseInner)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CreateOrUpdateEntryBatch200ResponseInner>(response, statusCodeToTypeMap);
            return new Response<CreateOrUpdateEntryBatch200ResponseInner>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Create entry.
        /// </summary>
        /// <param name="request">Request object for CreateEntryEnv.</param>
        /// <param name="operationConfiguration">Configuration for CreateEntryEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> CreateEntryEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.CreateEntryEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CreateOrUpdateEntryBatch200ResponseInner)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CreateOrUpdateEntryBatch200ResponseInner>(response, statusCodeToTypeMap);
            return new Response<CreateOrUpdateEntryBatch200ResponseInner>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Batch Create or Update Entries.
        /// </summary>
        /// <param name="request">Request object for CreateOrUpdateEntryBatch.</param>
        /// <param name="operationConfiguration">Configuration for CreateOrUpdateEntryBatch.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;CreateOrUpdateEntryBatch200ResponseInner&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<CreateOrUpdateEntryBatch200ResponseInner>>> CreateOrUpdateEntryBatchAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.CreateOrUpdateEntryBatchRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<CreateOrUpdateEntryBatch200ResponseInner>)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<CreateOrUpdateEntryBatch200ResponseInner>>(response, statusCodeToTypeMap);
            return new Response<List<CreateOrUpdateEntryBatch200ResponseInner>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Batch Create or Update Entries.
        /// </summary>
        /// <param name="request">Request object for CreateOrUpdateEntryBatchEnv.</param>
        /// <param name="operationConfiguration">Configuration for CreateOrUpdateEntryBatchEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;CreateOrUpdateEntryBatch200ResponseInner&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<CreateOrUpdateEntryBatch200ResponseInner>>> CreateOrUpdateEntryBatchEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.CreateOrUpdateEntryBatchEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<CreateOrUpdateEntryBatch200ResponseInner>)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<CreateOrUpdateEntryBatch200ResponseInner>>(response, statusCodeToTypeMap);
            return new Response<List<CreateOrUpdateEntryBatch200ResponseInner>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Create or update entry by path.
        /// </summary>
        /// <param name="request">Request object for CreateOrUpdateEntryByPath.</param>
        /// <param name="operationConfiguration">Configuration for CreateOrUpdateEntryByPath.</param>
        /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> CreateOrUpdateEntryByPathAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.CreateOrUpdateEntryByPathRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CreateOrUpdateEntryBatch200ResponseInner)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CreateOrUpdateEntryBatch200ResponseInner>(response, statusCodeToTypeMap);
            return new Response<CreateOrUpdateEntryBatch200ResponseInner>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Create or update entry by path.
        /// </summary>
        /// <param name="request">Request object for CreateOrUpdateEntryByPathEnv.</param>
        /// <param name="operationConfiguration">Configuration for CreateOrUpdateEntryByPathEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> CreateOrUpdateEntryByPathEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.CreateOrUpdateEntryByPathEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CreateOrUpdateEntryBatch200ResponseInner)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CreateOrUpdateEntryBatch200ResponseInner>(response, statusCodeToTypeMap);
            return new Response<CreateOrUpdateEntryBatch200ResponseInner>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Delete entry.
        /// </summary>
        /// <param name="request">Request object for DeleteEntry.</param>
        /// <param name="operationConfiguration">Configuration for DeleteEntry.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> DeleteEntryAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.DeleteEntryRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Batch delete entries.
        /// </summary>
        /// <param name="request">Request object for DeleteEntryBatch.</param>
        /// <param name="operationConfiguration">Configuration for DeleteEntryBatch.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> DeleteEntryBatchAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.DeleteEntryBatchRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Batch delete entries.
        /// </summary>
        /// <param name="request">Request object for DeleteEntryBatchEnv.</param>
        /// <param name="operationConfiguration">Configuration for DeleteEntryBatchEnv.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> DeleteEntryBatchEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.DeleteEntryBatchEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Delete entry.
        /// </summary>
        /// <param name="request">Request object for DeleteEntryEnv.</param>
        /// <param name="operationConfiguration">Configuration for DeleteEntryEnv.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> DeleteEntryEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.DeleteEntryEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Get entries for bucket.
        /// </summary>
        /// <param name="request">Request object for GetEntries.</param>
        /// <param name="operationConfiguration">Configuration for GetEntries.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;CreateOrUpdateEntryBatch200ResponseInner&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<CreateOrUpdateEntryBatch200ResponseInner>>> GetEntriesAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.GetEntriesRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<CreateOrUpdateEntryBatch200ResponseInner>)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<CreateOrUpdateEntryBatch200ResponseInner>>(response, statusCodeToTypeMap);
            return new Response<List<CreateOrUpdateEntryBatch200ResponseInner>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get entries for bucket.
        /// </summary>
        /// <param name="request">Request object for GetEntriesEnv.</param>
        /// <param name="operationConfiguration">Configuration for GetEntriesEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;CreateOrUpdateEntryBatch200ResponseInner&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<CreateOrUpdateEntryBatch200ResponseInner>>> GetEntriesEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.GetEntriesEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<CreateOrUpdateEntryBatch200ResponseInner>)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<CreateOrUpdateEntryBatch200ResponseInner>>(response, statusCodeToTypeMap);
            return new Response<List<CreateOrUpdateEntryBatch200ResponseInner>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get entry.
        /// </summary>
        /// <param name="request">Request object for GetEntry.</param>
        /// <param name="operationConfiguration">Configuration for GetEntry.</param>
        /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> GetEntryAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.GetEntryRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CreateOrUpdateEntryBatch200ResponseInner)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CreateOrUpdateEntryBatch200ResponseInner>(response, statusCodeToTypeMap);
            return new Response<CreateOrUpdateEntryBatch200ResponseInner>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get entry by path.
        /// </summary>
        /// <param name="request">Request object for GetEntryByPath.</param>
        /// <param name="operationConfiguration">Configuration for GetEntryByPath.</param>
        /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> GetEntryByPathAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.GetEntryByPathRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CreateOrUpdateEntryBatch200ResponseInner)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CreateOrUpdateEntryBatch200ResponseInner>(response, statusCodeToTypeMap);
            return new Response<CreateOrUpdateEntryBatch200ResponseInner>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get entry by path.
        /// </summary>
        /// <param name="request">Request object for GetEntryByPathEnv.</param>
        /// <param name="operationConfiguration">Configuration for GetEntryByPathEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> GetEntryByPathEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.GetEntryByPathEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CreateOrUpdateEntryBatch200ResponseInner)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CreateOrUpdateEntryBatch200ResponseInner>(response, statusCodeToTypeMap);
            return new Response<CreateOrUpdateEntryBatch200ResponseInner>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get entry.
        /// </summary>
        /// <param name="request">Request object for GetEntryEnv.</param>
        /// <param name="operationConfiguration">Configuration for GetEntryEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> GetEntryEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.GetEntryEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CreateOrUpdateEntryBatch200ResponseInner)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CreateOrUpdateEntryBatch200ResponseInner>(response, statusCodeToTypeMap);
            return new Response<CreateOrUpdateEntryBatch200ResponseInner>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get entry version.
        /// </summary>
        /// <param name="request">Request object for GetEntryVersion.</param>
        /// <param name="operationConfiguration">Configuration for GetEntryVersion.</param>
        /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> GetEntryVersionAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.GetEntryVersionRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CreateOrUpdateEntryBatch200ResponseInner)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CreateOrUpdateEntryBatch200ResponseInner>(response, statusCodeToTypeMap);
            return new Response<CreateOrUpdateEntryBatch200ResponseInner>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get entry version.
        /// </summary>
        /// <param name="request">Request object for GetEntryVersionEnv.</param>
        /// <param name="operationConfiguration">Configuration for GetEntryVersionEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> GetEntryVersionEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.GetEntryVersionEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CreateOrUpdateEntryBatch200ResponseInner)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CreateOrUpdateEntryBatch200ResponseInner>(response, statusCodeToTypeMap);
            return new Response<CreateOrUpdateEntryBatch200ResponseInner>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get entry versions.
        /// </summary>
        /// <param name="request">Request object for GetEntryVersions.</param>
        /// <param name="operationConfiguration">Configuration for GetEntryVersions.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;GetEntryVersions200ResponseInner&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<GetEntryVersions200ResponseInner>>> GetEntryVersionsAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.GetEntryVersionsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<GetEntryVersions200ResponseInner>)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<GetEntryVersions200ResponseInner>>(response, statusCodeToTypeMap);
            return new Response<List<GetEntryVersions200ResponseInner>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get entry versions.
        /// </summary>
        /// <param name="request">Request object for GetEntryVersionsEnv.</param>
        /// <param name="operationConfiguration">Configuration for GetEntryVersionsEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;GetEntryVersions200ResponseInner&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<GetEntryVersions200ResponseInner>>> GetEntryVersionsEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.GetEntryVersionsEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<GetEntryVersions200ResponseInner>)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<GetEntryVersions200ResponseInner>>(response, statusCodeToTypeMap);
            return new Response<List<GetEntryVersions200ResponseInner>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Update entry.
        /// </summary>
        /// <param name="request">Request object for UpdateEntry.</param>
        /// <param name="operationConfiguration">Configuration for UpdateEntry.</param>
        /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> UpdateEntryAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.UpdateEntryRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CreateOrUpdateEntryBatch200ResponseInner)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PUT",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CreateOrUpdateEntryBatch200ResponseInner>(response, statusCodeToTypeMap);
            return new Response<CreateOrUpdateEntryBatch200ResponseInner>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Update entry by path.
        /// </summary>
        /// <param name="request">Request object for UpdateEntryByPath.</param>
        /// <param name="operationConfiguration">Configuration for UpdateEntryByPath.</param>
        /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> UpdateEntryByPathAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.UpdateEntryByPathRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CreateOrUpdateEntryBatch200ResponseInner)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PUT",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CreateOrUpdateEntryBatch200ResponseInner>(response, statusCodeToTypeMap);
            return new Response<CreateOrUpdateEntryBatch200ResponseInner>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Update entry by path.
        /// </summary>
        /// <param name="request">Request object for UpdateEntryByPathEnv.</param>
        /// <param name="operationConfiguration">Configuration for UpdateEntryByPathEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> UpdateEntryByPathEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.UpdateEntryByPathEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CreateOrUpdateEntryBatch200ResponseInner)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PUT",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CreateOrUpdateEntryBatch200ResponseInner>(response, statusCodeToTypeMap);
            return new Response<CreateOrUpdateEntryBatch200ResponseInner>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Update entry.
        /// </summary>
        /// <param name="request">Request object for UpdateEntryEnv.</param>
        /// <param name="operationConfiguration">Configuration for UpdateEntryEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and CreateOrUpdateEntryBatch200ResponseInner object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<CreateOrUpdateEntryBatch200ResponseInner>> UpdateEntryEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Entries.UpdateEntryEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(CreateOrUpdateEntryBatch200ResponseInner)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PUT",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<CreateOrUpdateEntryBatch200ResponseInner>(response, statusCodeToTypeMap);
            return new Response<CreateOrUpdateEntryBatch200ResponseInner>(response, handledResponse);
        }

    }
}
