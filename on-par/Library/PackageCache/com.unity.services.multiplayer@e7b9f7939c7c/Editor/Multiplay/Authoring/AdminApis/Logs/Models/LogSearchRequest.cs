//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Models
{
    /// <summary>
    /// Filtering and pagination for searching game server logs
    /// </summary>
    [Preserve]
    [DataContract(Name = "Log_Search_Request")]
    internal class LogSearchRequest
    {
        /// <summary>
        /// Filtering and pagination for searching game server logs
        /// </summary>
        /// <param name="query">Terms to search for in log events</param>
        /// <param name="size">Limits the number of results returned.</param>
        /// <param name="filters">filters param</param>
        /// <param name="paginationToken">A token used to fetch the next page of results. If provided, all other fields are ignored.</param>
        [Preserve]
        public LogSearchRequest(string query, int size, LogSearchRequestFilters filters, string paginationToken)
        {
            Query = query;
            Size = size;
            Filters = filters;
            PaginationToken = paginationToken;
        }

        /// <summary>
        /// Terms to search for in log events
        /// </summary>
        [Preserve]
        [DataMember(Name = "query", IsRequired = true, EmitDefaultValue = true)]
        public string Query{ get; }

        /// <summary>
        /// Limits the number of results returned.
        /// </summary>
        [Preserve]
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = true)]
        public int Size{ get; }

        /// <summary>
        /// Parameter filters of LogSearchRequest
        /// </summary>
        [Preserve]
        [DataMember(Name = "filters", IsRequired = true, EmitDefaultValue = true)]
        public LogSearchRequestFilters Filters{ get; }

        /// <summary>
        /// A token used to fetch the next page of results. If provided, all other fields are ignored.
        /// </summary>
        [Preserve]
        [DataMember(Name = "paginationToken", IsRequired = true, EmitDefaultValue = true)]
        public string PaginationToken{ get; }

        /// <summary>
        /// Formats a LogSearchRequest into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Query != null)
            {
                serializedModel += "query," + Query + ",";
            }
            serializedModel += "size," + Size.ToString() + ",";
            if (Filters != null)
            {
                serializedModel += "filters," + Filters.ToString() + ",";
            }
            if (PaginationToken != null)
            {
                serializedModel += "paginationToken," + PaginationToken;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a LogSearchRequest as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Query != null)
            {
                var queryStringValue = Query.ToString();
                dictionary.Add("query", queryStringValue);
            }

            var sizeStringValue = Size.ToString();
            dictionary.Add("size", sizeStringValue);

            if (PaginationToken != null)
            {
                var paginationTokenStringValue = PaginationToken.ToString();
                dictionary.Add("paginationToken", paginationTokenStringValue);
            }

            return dictionary;
        }
    }
}
