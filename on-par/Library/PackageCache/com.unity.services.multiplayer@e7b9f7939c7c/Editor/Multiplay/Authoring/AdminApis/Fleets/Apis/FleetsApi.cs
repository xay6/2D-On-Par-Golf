//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System.Threading.Tasks;
using System.Collections.Generic;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Models;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets;

namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Apis.Fleets
{
    /// <summary>
    /// Interface for the FleetsApiClient
    /// </summary>
    internal interface IFleetsApiClient
    {
            /// <summary>
            /// Async Operation.
            /// Add fleet region.
            /// </summary>
            /// <param name="request">Request object for AddFleetRegion.</param>
            /// <param name="operationConfiguration">Configuration for AddFleetRegion.</param>
            /// <returns>Task for a Response object containing status code, headers, and NewFleetRegion object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<NewFleetRegion>> AddFleetRegionAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.AddFleetRegionRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Create a fleet.
            /// </summary>
            /// <param name="request">Request object for CreateFleet.</param>
            /// <param name="operationConfiguration">Configuration for CreateFleet.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.Fleet object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.Fleet>> CreateFleetAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.CreateFleetRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Delete a fleet.
            /// </summary>
            /// <param name="request">Request object for DeleteFleet.</param>
            /// <param name="operationConfiguration">Configuration for DeleteFleet.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> DeleteFleetAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.DeleteFleetRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Available fleet regions list.
            /// </summary>
            /// <param name="request">Request object for GetAvailableFleetRegions.</param>
            /// <param name="operationConfiguration">Configuration for GetAvailableFleetRegions.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;FleetRegionsTemplateListItem&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<FleetRegionsTemplateListItem>>> GetAvailableFleetRegionsAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.GetAvailableFleetRegionsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// View a fleet.
            /// </summary>
            /// <param name="request">Request object for GetFleet.</param>
            /// <param name="operationConfiguration">Configuration for GetFleet.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.Fleet object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.Fleet>> GetFleetAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.GetFleetRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// View Active Build Configuration and Switch Status.
            /// </summary>
            /// <param name="request">Request object for GetFleetBuildConfigurationSwitchStatus.</param>
            /// <param name="operationConfiguration">Configuration for GetFleetBuildConfigurationSwitchStatus.</param>
            /// <returns>Task for a Response object containing status code, headers, and FleetBuildConfigurationSwitchStatus object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<FleetBuildConfigurationSwitchStatus>> GetFleetBuildConfigurationSwitchStatusAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.GetFleetBuildConfigurationSwitchStatusRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get Inventory for a fleet.
            /// </summary>
            /// <param name="request">Request object for GetFleetInventory.</param>
            /// <param name="operationConfiguration">Configuration for GetFleetInventory.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;FleetInventoryItem&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<FleetInventoryItem>>> GetFleetInventoryAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.GetFleetInventoryRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// List fleets.
            /// </summary>
            /// <param name="request">Request object for ListFleets.</param>
            /// <param name="operationConfiguration">Configuration for ListFleets.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;FleetListItem&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<FleetListItem>>> ListFleetsAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.ListFleetsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// List template fleet regions.
            /// </summary>
            /// <param name="request">Request object for ListTemplateFleetRegions.</param>
            /// <param name="operationConfiguration">Configuration for ListTemplateFleetRegions.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;FleetRegionsTemplateListItem&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<FleetRegionsTemplateListItem>>> ListTemplateFleetRegionsAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.ListTemplateFleetRegionsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Trigger Build Configuration Switch for Reservation Fleet.
            /// </summary>
            /// <param name="request">Request object for SwitchReservationFleetActiveBuildConfiguration.</param>
            /// <param name="operationConfiguration">Configuration for SwitchReservationFleetActiveBuildConfiguration.</param>
            /// <returns>Task for a Response object containing status code, headers, and FleetBuildConfigurationSwitchStatus object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<FleetBuildConfigurationSwitchStatus>> SwitchReservationFleetActiveBuildConfigurationAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.SwitchReservationFleetActiveBuildConfigurationRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Update a fleet.
            /// </summary>
            /// <param name="request">Request object for UpdateFleet.</param>
            /// <param name="operationConfiguration">Configuration for UpdateFleet.</param>
            /// <returns>Task for a Response object containing status code, headers, and Models.Fleet object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<Models.Fleet>> UpdateFleetAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.UpdateFleetRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Update fleet region settings.
            /// </summary>
            /// <param name="request">Request object for UpdateFleetRegion.</param>
            /// <param name="operationConfiguration">Configuration for UpdateFleetRegion.</param>
            /// <returns>Task for a Response object containing status code, headers, and UpdatedFleetRegion object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<UpdatedFleetRegion>> UpdateFleetRegionAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.UpdateFleetRegionRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Update the cost score for all locations within a fleet region for a given provider.
            /// </summary>
            /// <param name="request">Request object for UpdateFleetRegionCostScore.</param>
            /// <param name="operationConfiguration">Configuration for UpdateFleetRegionCostScore.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;ASingleLocationWithItsCostScore&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<ASingleLocationWithItsCostScore>>> UpdateFleetRegionCostScoreAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.UpdateFleetRegionCostScoreRequest request, Configuration operationConfiguration = null);

    }

    ///<inheritdoc cref="IFleetsApiClient"/>
    internal class FleetsApiClient : BaseApiClient, IFleetsApiClient
    {
        private const int _baseTimeout = 10;
        private Configuration _configuration;
        /// <summary>
        /// Accessor for the client configuration object. This returns a merge
        /// between the current configuration and the global configuration to
        /// ensure the correct combination of headers and a base path (if it is
        /// set) are returned.
        /// </summary>
        public Configuration Configuration
        {
            get {
                // We return a merge between the current configuration and the
                // global configuration to ensure we have the correct
                // combination of headers and a base path (if it is set).
                Configuration globalConfiguration = new Configuration("https://services.unity.com", 10, 4, null);
                return Configuration.MergeConfigurations(_configuration, globalConfiguration);
            }
            set { _configuration = value; }
        }

        /// <summary>
        /// FleetsApiClient Constructor.
        /// </summary>
        /// <param name="httpClient">The HttpClient for FleetsApiClient.</param>
        /// <param name="configuration"> FleetsApiClient Configuration object.</param>
        public FleetsApiClient(IHttpClient httpClient,
            Configuration configuration = null) : base(httpClient)
        {
            // We don't need to worry about the configuration being null at
            // this stage, we will check this in the accessor.
            _configuration = configuration;


        }


        /// <summary>
        /// Async Operation.
        /// Add fleet region.
        /// </summary>
        /// <param name="request">Request object for AddFleetRegion.</param>
        /// <param name="operationConfiguration">Configuration for AddFleetRegion.</param>
        /// <returns>Task for a Response object containing status code, headers, and NewFleetRegion object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<NewFleetRegion>> AddFleetRegionAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.AddFleetRegionRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(NewFleetRegion)   },{"400", typeof(ListFleets400Response)   },{"401", typeof(ListFleets401Response)   },{"403", typeof(ListFleets403Response)   },{"404", typeof(ListFleets404Response)   },{"429", typeof(ListFleets429Response)   },{"500", typeof(ListFleets500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<NewFleetRegion>(response, statusCodeToTypeMap);
            return new Response<NewFleetRegion>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Create a fleet.
        /// </summary>
        /// <param name="request">Request object for CreateFleet.</param>
        /// <param name="operationConfiguration">Configuration for CreateFleet.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.Fleet object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.Fleet>> CreateFleetAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.CreateFleetRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.Fleet)   },{"400", typeof(ListFleets400Response)   },{"401", typeof(ListFleets401Response)   },{"403", typeof(ListFleets403Response)   },{"404", typeof(ListFleets404Response)   },{"409", typeof(CreateFleet409Response)   },{"429", typeof(ListFleets429Response)   },{"500", typeof(ListFleets500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.Fleet>(response, statusCodeToTypeMap);
            return new Response<Models.Fleet>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Delete a fleet.
        /// </summary>
        /// <param name="request">Request object for DeleteFleet.</param>
        /// <param name="operationConfiguration">Configuration for DeleteFleet.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> DeleteFleetAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.DeleteFleetRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null },{"400", typeof(ListFleets400Response)   },{"401", typeof(ListFleets401Response)   },{"403", typeof(ListFleets403Response)   },{"404", typeof(ListFleets404Response)   },{"409", typeof(ConflictError)   },{"429", typeof(ListFleets429Response)   },{"500", typeof(ListFleets500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Available fleet regions list.
        /// </summary>
        /// <param name="request">Request object for GetAvailableFleetRegions.</param>
        /// <param name="operationConfiguration">Configuration for GetAvailableFleetRegions.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;FleetRegionsTemplateListItem&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<FleetRegionsTemplateListItem>>> GetAvailableFleetRegionsAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.GetAvailableFleetRegionsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<FleetRegionsTemplateListItem>)   },{"400", typeof(ListFleets400Response)   },{"401", typeof(ListFleets401Response)   },{"403", typeof(ListFleets403Response)   },{"404", typeof(ListFleets404Response)   },{"429", typeof(ListFleets429Response)   },{"500", typeof(ListFleets500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<FleetRegionsTemplateListItem>>(response, statusCodeToTypeMap);
            return new Response<List<FleetRegionsTemplateListItem>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// View a fleet.
        /// </summary>
        /// <param name="request">Request object for GetFleet.</param>
        /// <param name="operationConfiguration">Configuration for GetFleet.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.Fleet object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.Fleet>> GetFleetAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.GetFleetRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.Fleet)   },{"400", typeof(ListFleets400Response)   },{"401", typeof(ListFleets401Response)   },{"403", typeof(ListFleets403Response)   },{"404", typeof(ListFleets404Response)   },{"429", typeof(ListFleets429Response)   },{"500", typeof(ListFleets500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.Fleet>(response, statusCodeToTypeMap);
            return new Response<Models.Fleet>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// View Active Build Configuration and Switch Status.
        /// </summary>
        /// <param name="request">Request object for GetFleetBuildConfigurationSwitchStatus.</param>
        /// <param name="operationConfiguration">Configuration for GetFleetBuildConfigurationSwitchStatus.</param>
        /// <returns>Task for a Response object containing status code, headers, and FleetBuildConfigurationSwitchStatus object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<FleetBuildConfigurationSwitchStatus>> GetFleetBuildConfigurationSwitchStatusAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.GetFleetBuildConfigurationSwitchStatusRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(FleetBuildConfigurationSwitchStatus)   },{"400", typeof(ListFleets400Response)   },{"401", typeof(ListFleets401Response)   },{"403", typeof(ListFleets403Response)   },{"404", typeof(ListFleets404Response)   },{"429", typeof(ListFleets429Response)   },{"500", typeof(ListFleets500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<FleetBuildConfigurationSwitchStatus>(response, statusCodeToTypeMap);
            return new Response<FleetBuildConfigurationSwitchStatus>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get Inventory for a fleet.
        /// </summary>
        /// <param name="request">Request object for GetFleetInventory.</param>
        /// <param name="operationConfiguration">Configuration for GetFleetInventory.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;FleetInventoryItem&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<FleetInventoryItem>>> GetFleetInventoryAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.GetFleetInventoryRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<FleetInventoryItem>)   },{"400", typeof(ListFleets400Response)   },{"401", typeof(ListFleets401Response)   },{"403", typeof(ListFleets403Response)   },{"404", typeof(ListFleets404Response)   },{"429", typeof(ListFleets429Response)   },{"500", typeof(ListFleets500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<FleetInventoryItem>>(response, statusCodeToTypeMap);
            return new Response<List<FleetInventoryItem>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// List fleets.
        /// </summary>
        /// <param name="request">Request object for ListFleets.</param>
        /// <param name="operationConfiguration">Configuration for ListFleets.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;FleetListItem&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<FleetListItem>>> ListFleetsAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.ListFleetsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<FleetListItem>)   },{"400", typeof(ListFleets400Response)   },{"401", typeof(ListFleets401Response)   },{"403", typeof(ListFleets403Response)   },{"404", typeof(ListFleets404Response)   },{"429", typeof(ListFleets429Response)   },{"500", typeof(ListFleets500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<FleetListItem>>(response, statusCodeToTypeMap);
            return new Response<List<FleetListItem>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// List template fleet regions.
        /// </summary>
        /// <param name="request">Request object for ListTemplateFleetRegions.</param>
        /// <param name="operationConfiguration">Configuration for ListTemplateFleetRegions.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;FleetRegionsTemplateListItem&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<FleetRegionsTemplateListItem>>> ListTemplateFleetRegionsAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.ListTemplateFleetRegionsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<FleetRegionsTemplateListItem>)   },{"400", typeof(ListFleets400Response)   },{"401", typeof(ListFleets401Response)   },{"403", typeof(ListFleets403Response)   },{"404", typeof(ListFleets404Response)   },{"429", typeof(ListFleets429Response)   },{"500", typeof(ListFleets500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<FleetRegionsTemplateListItem>>(response, statusCodeToTypeMap);
            return new Response<List<FleetRegionsTemplateListItem>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Trigger Build Configuration Switch for Reservation Fleet.
        /// </summary>
        /// <param name="request">Request object for SwitchReservationFleetActiveBuildConfiguration.</param>
        /// <param name="operationConfiguration">Configuration for SwitchReservationFleetActiveBuildConfiguration.</param>
        /// <returns>Task for a Response object containing status code, headers, and FleetBuildConfigurationSwitchStatus object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<FleetBuildConfigurationSwitchStatus>> SwitchReservationFleetActiveBuildConfigurationAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.SwitchReservationFleetActiveBuildConfigurationRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"202", typeof(FleetBuildConfigurationSwitchStatus)   },{"400", typeof(ListFleets400Response)   },{"401", typeof(ListFleets401Response)   },{"403", typeof(ListFleets403Response)   },{"404", typeof(ListFleets404Response)   },{"429", typeof(ListFleets429Response)   },{"500", typeof(ListFleets500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PUT",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<FleetBuildConfigurationSwitchStatus>(response, statusCodeToTypeMap);
            return new Response<FleetBuildConfigurationSwitchStatus>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Update a fleet.
        /// </summary>
        /// <param name="request">Request object for UpdateFleet.</param>
        /// <param name="operationConfiguration">Configuration for UpdateFleet.</param>
        /// <returns>Task for a Response object containing status code, headers, and Models.Fleet object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<Models.Fleet>> UpdateFleetAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.UpdateFleetRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(Models.Fleet)   },{"400", typeof(ListFleets400Response)   },{"401", typeof(ListFleets401Response)   },{"403", typeof(ListFleets403Response)   },{"404", typeof(ListFleets404Response)   },{"429", typeof(ListFleets429Response)   },{"500", typeof(ListFleets500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PUT",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<Models.Fleet>(response, statusCodeToTypeMap);
            return new Response<Models.Fleet>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Update fleet region settings.
        /// </summary>
        /// <param name="request">Request object for UpdateFleetRegion.</param>
        /// <param name="operationConfiguration">Configuration for UpdateFleetRegion.</param>
        /// <returns>Task for a Response object containing status code, headers, and UpdatedFleetRegion object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<UpdatedFleetRegion>> UpdateFleetRegionAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.UpdateFleetRegionRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(UpdatedFleetRegion)   },{"400", typeof(ListFleets400Response)   },{"401", typeof(ListFleets401Response)   },{"403", typeof(ListFleets403Response)   },{"404", typeof(ListFleets404Response)   },{"429", typeof(ListFleets429Response)   },{"500", typeof(ListFleets500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PUT",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<UpdatedFleetRegion>(response, statusCodeToTypeMap);
            return new Response<UpdatedFleetRegion>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Update the cost score for all locations within a fleet region for a given provider.
        /// </summary>
        /// <param name="request">Request object for UpdateFleetRegionCostScore.</param>
        /// <param name="operationConfiguration">Configuration for UpdateFleetRegionCostScore.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;ASingleLocationWithItsCostScore&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<ASingleLocationWithItsCostScore>>> UpdateFleetRegionCostScoreAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets.UpdateFleetRegionCostScoreRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<ASingleLocationWithItsCostScore>)   },{"400", typeof(ListFleets400Response)   },{"401", typeof(ListFleets401Response)   },{"403", typeof(ListFleets403Response)   },{"404", typeof(ListFleets404Response)   },{"429", typeof(ListFleets429Response)   },{"500", typeof(ListFleets500Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PUT",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<ASingleLocationWithItsCostScore>>(response, statusCodeToTypeMap);
            return new Response<List<ASingleLocationWithItsCostScore>>(response, handledResponse);
        }

    }
}
