//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Models
{
    /// <summary>
    /// InlineObject14 model
    /// </summary>
    [Preserve]
    [DataContract(Name = "inline_object_14")]
    internal class InlineObject14
    {
        /// <summary>
        /// Creates an instance of InlineObject14.
        /// </summary>
        /// <param name="notes">notes param</param>
        [Preserve]
        public InlineObject14(string notes = default)
        {
            Notes = notes;
        }

        /// <summary>
        /// Parameter notes of InlineObject14
        /// </summary>
        [Preserve]
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public string Notes{ get; }

        /// <summary>
        /// Formats a InlineObject14 into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Notes != null)
            {
                serializedModel += "notes," + Notes;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a InlineObject14 as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Notes != null)
            {
                var notesStringValue = Notes.ToString();
                dictionary.Add("notes", notesStringValue);
            }

            return dictionary;
        }
    }
}
