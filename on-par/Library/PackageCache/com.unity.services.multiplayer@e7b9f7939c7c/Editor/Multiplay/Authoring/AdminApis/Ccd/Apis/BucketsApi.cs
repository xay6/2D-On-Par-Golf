//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System.Threading.Tasks;
using System.Collections.Generic;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Models;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets;

namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Apis.Buckets
{
    /// <summary>
    /// Interface for the BucketsApiClient
    /// </summary>
    internal interface IBucketsApiClient
    {
            /// <summary>
            /// Async Operation.
            /// Create bucket.
            /// </summary>
            /// <param name="request">Request object for CreateBucketByProject.</param>
            /// <param name="operationConfiguration">Configuration for CreateBucketByProject.</param>
            /// <returns>Task for a Response object containing status code, headers, and GetBucket200Response object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<GetBucket200Response>> CreateBucketByProjectAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.CreateBucketByProjectRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Create bucket.
            /// </summary>
            /// <param name="request">Request object for CreateBucketByProjectEnv.</param>
            /// <param name="operationConfiguration">Configuration for CreateBucketByProjectEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and GetBucket200Response object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<GetBucket200Response>> CreateBucketByProjectEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.CreateBucketByProjectEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Delete a bucket.
            /// </summary>
            /// <param name="request">Request object for DeleteBucket.</param>
            /// <param name="operationConfiguration">Configuration for DeleteBucket.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> DeleteBucketAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.DeleteBucketRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Delete a bucket.
            /// </summary>
            /// <param name="request">Request object for DeleteBucketEnv.</param>
            /// <param name="operationConfiguration">Configuration for DeleteBucketEnv.</param>
            /// <returns>Task for a Response object containing status code, headers.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response> DeleteBucketEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.DeleteBucketEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get a bucket.
            /// </summary>
            /// <param name="request">Request object for GetBucket.</param>
            /// <param name="operationConfiguration">Configuration for GetBucket.</param>
            /// <returns>Task for a Response object containing status code, headers, and GetBucket200Response object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<GetBucket200Response>> GetBucketAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.GetBucketRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get a bucket.
            /// </summary>
            /// <param name="request">Request object for GetBucketEnv.</param>
            /// <param name="operationConfiguration">Configuration for GetBucketEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and GetBucket200Response object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<GetBucket200Response>> GetBucketEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.GetBucketEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get counts of changes since last release.
            /// </summary>
            /// <param name="request">Request object for GetDiff.</param>
            /// <param name="operationConfiguration">Configuration for GetDiff.</param>
            /// <returns>Task for a Response object containing status code, headers, and GetBucket200ResponseChanges object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<GetBucket200ResponseChanges>> GetDiffAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.GetDiffRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get changed entries since last releases.
            /// </summary>
            /// <param name="request">Request object for GetDiffEntries.</param>
            /// <param name="operationConfiguration">Configuration for GetDiffEntries.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;GetReleaseDiffEntries200ResponseInner&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<GetReleaseDiffEntries200ResponseInner>>> GetDiffEntriesAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.GetDiffEntriesRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get changed entries since last releases.
            /// </summary>
            /// <param name="request">Request object for GetDiffEntriesEnv.</param>
            /// <param name="operationConfiguration">Configuration for GetDiffEntriesEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;GetReleaseDiffEntries200ResponseInner&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<GetReleaseDiffEntries200ResponseInner>>> GetDiffEntriesEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.GetDiffEntriesEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get counts of changes since last release.
            /// </summary>
            /// <param name="request">Request object for GetDiffEnv.</param>
            /// <param name="operationConfiguration">Configuration for GetDiffEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and GetBucket200ResponseChanges object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<GetBucket200ResponseChanges>> GetDiffEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.GetDiffEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get information about the promotion job.
            /// </summary>
            /// <param name="request">Request object for GetPromotion.</param>
            /// <param name="operationConfiguration">Configuration for GetPromotion.</param>
            /// <returns>Task for a Response object containing status code, headers, and GetPromotions200ResponseInner object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<GetPromotions200ResponseInner>> GetPromotionAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.GetPromotionRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get information about the promotion job.
            /// </summary>
            /// <param name="request">Request object for GetPromotionEnv.</param>
            /// <param name="operationConfiguration">Configuration for GetPromotionEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and GetPromotions200ResponseInner object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<GetPromotions200ResponseInner>> GetPromotionEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.GetPromotionEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get promotions for a bucket.
            /// </summary>
            /// <param name="request">Request object for GetPromotions.</param>
            /// <param name="operationConfiguration">Configuration for GetPromotions.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;GetPromotions200ResponseInner&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<GetPromotions200ResponseInner>>> GetPromotionsAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.GetPromotionsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get promotions for a bucket.
            /// </summary>
            /// <param name="request">Request object for GetPromotionsEnv.</param>
            /// <param name="operationConfiguration">Configuration for GetPromotionsEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;GetPromotions200ResponseInner&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<GetPromotions200ResponseInner>>> GetPromotionsEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.GetPromotionsEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get buckets for project.
            /// </summary>
            /// <param name="request">Request object for ListBucketsByProject.</param>
            /// <param name="operationConfiguration">Configuration for ListBucketsByProject.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;GetBucket200Response&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<GetBucket200Response>>> ListBucketsByProjectAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.ListBucketsByProjectRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get buckets for project.
            /// </summary>
            /// <param name="request">Request object for ListBucketsByProjectEnv.</param>
            /// <param name="operationConfiguration">Configuration for ListBucketsByProjectEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;GetBucket200Response&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<GetBucket200Response>>> ListBucketsByProjectEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.ListBucketsByProjectEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Promote release between buckets.
            /// </summary>
            /// <param name="request">Request object for PromoteBucket.</param>
            /// <param name="operationConfiguration">Configuration for PromoteBucket.</param>
            /// <returns>Task for a Response object containing status code, headers, and GetBucket200ResponseLastRelease object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<GetBucket200ResponseLastRelease>> PromoteBucketAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.PromoteBucketRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Promote release asynchronously between buckets.
            /// </summary>
            /// <param name="request">Request object for PromoteBucketAsync.</param>
            /// <param name="operationConfiguration">Configuration for PromoteBucketAsync.</param>
            /// <returns>Task for a Response object containing status code, headers, and PromoteBucketAsync200Response object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<PromoteBucketAsync200Response>> PromoteBucketAsyncAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.PromoteBucketAsyncRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Promote release asynchronously between buckets.
            /// </summary>
            /// <param name="request">Request object for PromoteBucketAsyncEnv.</param>
            /// <param name="operationConfiguration">Configuration for PromoteBucketAsyncEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and PromoteBucketAsync200Response object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<PromoteBucketAsync200Response>> PromoteBucketAsyncEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.PromoteBucketAsyncEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Promote release between buckets.
            /// </summary>
            /// <param name="request">Request object for PromoteBucketEnv.</param>
            /// <param name="operationConfiguration">Configuration for PromoteBucketEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and GetBucket200ResponseLastRelease object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<GetBucket200ResponseLastRelease>> PromoteBucketEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.PromoteBucketEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Update a bucket.
            /// </summary>
            /// <param name="request">Request object for UpdateBucket.</param>
            /// <param name="operationConfiguration">Configuration for UpdateBucket.</param>
            /// <returns>Task for a Response object containing status code, headers, and GetBucket200Response object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<GetBucket200Response>> UpdateBucketAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.UpdateBucketRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Update a bucket.
            /// </summary>
            /// <param name="request">Request object for UpdateBucketEnv.</param>
            /// <param name="operationConfiguration">Configuration for UpdateBucketEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and GetBucket200Response object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<GetBucket200Response>> UpdateBucketEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.UpdateBucketEnvRequest request, Configuration operationConfiguration = null);

    }

    ///<inheritdoc cref="IBucketsApiClient"/>
    internal class BucketsApiClient : BaseApiClient, IBucketsApiClient
    {
        private const int _baseTimeout = 10;
        private Configuration _configuration;
        /// <summary>
        /// Accessor for the client configuration object. This returns a merge
        /// between the current configuration and the global configuration to
        /// ensure the correct combination of headers and a base path (if it is
        /// set) are returned.
        /// </summary>
        public Configuration Configuration
        {
            get {
                // We return a merge between the current configuration and the
                // global configuration to ensure we have the correct
                // combination of headers and a base path (if it is set).
                Configuration globalConfiguration = new Configuration("https://services.unity.com", 10, 4, null);
                return Configuration.MergeConfigurations(_configuration, globalConfiguration);
            }
            set { _configuration = value; }
        }

        /// <summary>
        /// BucketsApiClient Constructor.
        /// </summary>
        /// <param name="httpClient">The HttpClient for BucketsApiClient.</param>
        /// <param name="configuration"> BucketsApiClient Configuration object.</param>
        public BucketsApiClient(IHttpClient httpClient,
            Configuration configuration = null) : base(httpClient)
        {
            // We don't need to worry about the configuration being null at
            // this stage, we will check this in the accessor.
            _configuration = configuration;


        }


        /// <summary>
        /// Async Operation.
        /// Create bucket.
        /// </summary>
        /// <param name="request">Request object for CreateBucketByProject.</param>
        /// <param name="operationConfiguration">Configuration for CreateBucketByProject.</param>
        /// <returns>Task for a Response object containing status code, headers, and GetBucket200Response object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<GetBucket200Response>> CreateBucketByProjectAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.CreateBucketByProjectRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(GetBucket200Response)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<GetBucket200Response>(response, statusCodeToTypeMap);
            return new Response<GetBucket200Response>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Create bucket.
        /// </summary>
        /// <param name="request">Request object for CreateBucketByProjectEnv.</param>
        /// <param name="operationConfiguration">Configuration for CreateBucketByProjectEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and GetBucket200Response object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<GetBucket200Response>> CreateBucketByProjectEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.CreateBucketByProjectEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(GetBucket200Response)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<GetBucket200Response>(response, statusCodeToTypeMap);
            return new Response<GetBucket200Response>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Delete a bucket.
        /// </summary>
        /// <param name="request">Request object for DeleteBucket.</param>
        /// <param name="operationConfiguration">Configuration for DeleteBucket.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> DeleteBucketAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.DeleteBucketRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Delete a bucket.
        /// </summary>
        /// <param name="request">Request object for DeleteBucketEnv.</param>
        /// <param name="operationConfiguration">Configuration for DeleteBucketEnv.</param>
        /// <returns>Task for a Response object containing status code, headers.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response> DeleteBucketEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.DeleteBucketEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"204",  null },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("DELETE",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            ResponseHandler.HandleAsyncResponse(response, statusCodeToTypeMap);
            return new Response(response);
        }


        /// <summary>
        /// Async Operation.
        /// Get a bucket.
        /// </summary>
        /// <param name="request">Request object for GetBucket.</param>
        /// <param name="operationConfiguration">Configuration for GetBucket.</param>
        /// <returns>Task for a Response object containing status code, headers, and GetBucket200Response object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<GetBucket200Response>> GetBucketAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.GetBucketRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(GetBucket200Response)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<GetBucket200Response>(response, statusCodeToTypeMap);
            return new Response<GetBucket200Response>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get a bucket.
        /// </summary>
        /// <param name="request">Request object for GetBucketEnv.</param>
        /// <param name="operationConfiguration">Configuration for GetBucketEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and GetBucket200Response object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<GetBucket200Response>> GetBucketEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.GetBucketEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(GetBucket200Response)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<GetBucket200Response>(response, statusCodeToTypeMap);
            return new Response<GetBucket200Response>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get counts of changes since last release.
        /// </summary>
        /// <param name="request">Request object for GetDiff.</param>
        /// <param name="operationConfiguration">Configuration for GetDiff.</param>
        /// <returns>Task for a Response object containing status code, headers, and GetBucket200ResponseChanges object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<GetBucket200ResponseChanges>> GetDiffAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.GetDiffRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(GetBucket200ResponseChanges)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<GetBucket200ResponseChanges>(response, statusCodeToTypeMap);
            return new Response<GetBucket200ResponseChanges>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get changed entries since last releases.
        /// </summary>
        /// <param name="request">Request object for GetDiffEntries.</param>
        /// <param name="operationConfiguration">Configuration for GetDiffEntries.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;GetReleaseDiffEntries200ResponseInner&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<GetReleaseDiffEntries200ResponseInner>>> GetDiffEntriesAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.GetDiffEntriesRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<GetReleaseDiffEntries200ResponseInner>)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<GetReleaseDiffEntries200ResponseInner>>(response, statusCodeToTypeMap);
            return new Response<List<GetReleaseDiffEntries200ResponseInner>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get changed entries since last releases.
        /// </summary>
        /// <param name="request">Request object for GetDiffEntriesEnv.</param>
        /// <param name="operationConfiguration">Configuration for GetDiffEntriesEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;GetReleaseDiffEntries200ResponseInner&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<GetReleaseDiffEntries200ResponseInner>>> GetDiffEntriesEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.GetDiffEntriesEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<GetReleaseDiffEntries200ResponseInner>)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<GetReleaseDiffEntries200ResponseInner>>(response, statusCodeToTypeMap);
            return new Response<List<GetReleaseDiffEntries200ResponseInner>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get counts of changes since last release.
        /// </summary>
        /// <param name="request">Request object for GetDiffEnv.</param>
        /// <param name="operationConfiguration">Configuration for GetDiffEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and GetBucket200ResponseChanges object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<GetBucket200ResponseChanges>> GetDiffEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.GetDiffEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(GetBucket200ResponseChanges)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<GetBucket200ResponseChanges>(response, statusCodeToTypeMap);
            return new Response<GetBucket200ResponseChanges>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get information about the promotion job.
        /// </summary>
        /// <param name="request">Request object for GetPromotion.</param>
        /// <param name="operationConfiguration">Configuration for GetPromotion.</param>
        /// <returns>Task for a Response object containing status code, headers, and GetPromotions200ResponseInner object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<GetPromotions200ResponseInner>> GetPromotionAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.GetPromotionRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(GetPromotions200ResponseInner)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<GetPromotions200ResponseInner>(response, statusCodeToTypeMap);
            return new Response<GetPromotions200ResponseInner>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get information about the promotion job.
        /// </summary>
        /// <param name="request">Request object for GetPromotionEnv.</param>
        /// <param name="operationConfiguration">Configuration for GetPromotionEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and GetPromotions200ResponseInner object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<GetPromotions200ResponseInner>> GetPromotionEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.GetPromotionEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(GetPromotions200ResponseInner)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<GetPromotions200ResponseInner>(response, statusCodeToTypeMap);
            return new Response<GetPromotions200ResponseInner>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get promotions for a bucket.
        /// </summary>
        /// <param name="request">Request object for GetPromotions.</param>
        /// <param name="operationConfiguration">Configuration for GetPromotions.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;GetPromotions200ResponseInner&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<GetPromotions200ResponseInner>>> GetPromotionsAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.GetPromotionsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<GetPromotions200ResponseInner>)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<GetPromotions200ResponseInner>>(response, statusCodeToTypeMap);
            return new Response<List<GetPromotions200ResponseInner>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get promotions for a bucket.
        /// </summary>
        /// <param name="request">Request object for GetPromotionsEnv.</param>
        /// <param name="operationConfiguration">Configuration for GetPromotionsEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;GetPromotions200ResponseInner&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<GetPromotions200ResponseInner>>> GetPromotionsEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.GetPromotionsEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<GetPromotions200ResponseInner>)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<GetPromotions200ResponseInner>>(response, statusCodeToTypeMap);
            return new Response<List<GetPromotions200ResponseInner>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get buckets for project.
        /// </summary>
        /// <param name="request">Request object for ListBucketsByProject.</param>
        /// <param name="operationConfiguration">Configuration for ListBucketsByProject.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;GetBucket200Response&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<GetBucket200Response>>> ListBucketsByProjectAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.ListBucketsByProjectRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<GetBucket200Response>)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<GetBucket200Response>>(response, statusCodeToTypeMap);
            return new Response<List<GetBucket200Response>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get buckets for project.
        /// </summary>
        /// <param name="request">Request object for ListBucketsByProjectEnv.</param>
        /// <param name="operationConfiguration">Configuration for ListBucketsByProjectEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;GetBucket200Response&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<GetBucket200Response>>> ListBucketsByProjectEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.ListBucketsByProjectEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<GetBucket200Response>)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<GetBucket200Response>>(response, statusCodeToTypeMap);
            return new Response<List<GetBucket200Response>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Promote release between buckets.
        /// </summary>
        /// <param name="request">Request object for PromoteBucket.</param>
        /// <param name="operationConfiguration">Configuration for PromoteBucket.</param>
        /// <returns>Task for a Response object containing status code, headers, and GetBucket200ResponseLastRelease object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<GetBucket200ResponseLastRelease>> PromoteBucketAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.PromoteBucketRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(GetBucket200ResponseLastRelease)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<GetBucket200ResponseLastRelease>(response, statusCodeToTypeMap);
            return new Response<GetBucket200ResponseLastRelease>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Promote release asynchronously between buckets.
        /// </summary>
        /// <param name="request">Request object for PromoteBucketAsync.</param>
        /// <param name="operationConfiguration">Configuration for PromoteBucketAsync.</param>
        /// <returns>Task for a Response object containing status code, headers, and PromoteBucketAsync200Response object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<PromoteBucketAsync200Response>> PromoteBucketAsyncAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.PromoteBucketAsyncRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(PromoteBucketAsync200Response)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<PromoteBucketAsync200Response>(response, statusCodeToTypeMap);
            return new Response<PromoteBucketAsync200Response>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Promote release asynchronously between buckets.
        /// </summary>
        /// <param name="request">Request object for PromoteBucketAsyncEnv.</param>
        /// <param name="operationConfiguration">Configuration for PromoteBucketAsyncEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and PromoteBucketAsync200Response object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<PromoteBucketAsync200Response>> PromoteBucketAsyncEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.PromoteBucketAsyncEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(PromoteBucketAsync200Response)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<PromoteBucketAsync200Response>(response, statusCodeToTypeMap);
            return new Response<PromoteBucketAsync200Response>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Promote release between buckets.
        /// </summary>
        /// <param name="request">Request object for PromoteBucketEnv.</param>
        /// <param name="operationConfiguration">Configuration for PromoteBucketEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and GetBucket200ResponseLastRelease object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<GetBucket200ResponseLastRelease>> PromoteBucketEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.PromoteBucketEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(GetBucket200ResponseLastRelease)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<GetBucket200ResponseLastRelease>(response, statusCodeToTypeMap);
            return new Response<GetBucket200ResponseLastRelease>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Update a bucket.
        /// </summary>
        /// <param name="request">Request object for UpdateBucket.</param>
        /// <param name="operationConfiguration">Configuration for UpdateBucket.</param>
        /// <returns>Task for a Response object containing status code, headers, and GetBucket200Response object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<GetBucket200Response>> UpdateBucketAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.UpdateBucketRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(GetBucket200Response)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PUT",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<GetBucket200Response>(response, statusCodeToTypeMap);
            return new Response<GetBucket200Response>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Update a bucket.
        /// </summary>
        /// <param name="request">Request object for UpdateBucketEnv.</param>
        /// <param name="operationConfiguration">Configuration for UpdateBucketEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and GetBucket200Response object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<GetBucket200Response>> UpdateBucketEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Buckets.UpdateBucketEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(GetBucket200Response)   },{"400", typeof(GetBucket400Response)   },{"401", typeof(GetBucket401Response)   },{"403", typeof(GetBucket403Response)   },{"404", typeof(GetBucket404Response)   },{"429", typeof(GetBucket429Response)   },{"500", typeof(GetBucket500Response)   },{"503", typeof(GetBucket503Response)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PUT",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<GetBucket200Response>(response, statusCodeToTypeMap);
            return new Response<GetBucket200Response>(response, handledResponse);
        }

    }
}
