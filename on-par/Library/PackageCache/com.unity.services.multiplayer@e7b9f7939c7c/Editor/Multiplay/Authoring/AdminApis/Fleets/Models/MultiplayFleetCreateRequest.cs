//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Models
{
    /// <summary>
    /// Request to create a fleet with the provided configuration.
    /// </summary>
    [Preserve]
    [DataContract(Name = "multiplay.fleetCreateRequest")]
    internal class MultiplayFleetCreateRequest
    {
        /// <summary>
        /// Request to create a fleet with the provided configuration.
        /// </summary>
        /// <param name="name">Name of the fleet.</param>
        /// <param name="buildConfigurations">A list of build configuration IDs to associate with the fleet.</param>
        /// <param name="regions">A list of region associations to create.</param>
        /// <param name="osID">ID of the Operating System used in the fleet.</param>
        /// <param name="osFamily">The os family that the build is based on.</param>
        /// <param name="allocationType">The type of allocation method used by the fleet:   * &#x60;ALLOCATION&#x60; - The fleet accepts requests following the allocations-based model.   * &#x60;RESERVATION&#x60; - The fleet accepts requests following the reservations-based model. (Closed Beta) </param>
        /// <param name="usageSettings">A list of usage settings associated with the fleet.</param>
        /// <param name="graceful">Boolean to indicate whether graceful stop is enabled for the fleet. Only valid for reservations-based fleets.</param>
        [Preserve]
        public MultiplayFleetCreateRequest(string name, List<long> buildConfigurations, List<Region> regions, System.Guid osID = default, OsFamilyOptions osFamily = default, AllocationTypeOptions allocationType = default, List<FleetUsageSetting> usageSettings = default, bool graceful = default)
        {
            Name = name;
            OsID = osID;
            OsFamily = osFamily;
            BuildConfigurations = buildConfigurations;
            AllocationType = allocationType;
            UsageSettings = usageSettings;
            Graceful = graceful;
            Regions = regions;
        }

        /// <summary>
        /// Name of the fleet.
        /// </summary>
        [Preserve]
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name{ get; }
        
        /// <summary>
        /// ID of the Operating System used in the fleet.
        /// </summary>
        [Preserve]
        [DataMember(Name = "osID", EmitDefaultValue = false)]
        public System.Guid OsID{ get; }
        
        /// <summary>
        /// The os family that the build is based on.
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "osFamily", EmitDefaultValue = false)]
        public OsFamilyOptions OsFamily{ get; }
        
        /// <summary>
        /// A list of build configuration IDs to associate with the fleet.
        /// </summary>
        [Preserve]
        [DataMember(Name = "buildConfigurations", IsRequired = true, EmitDefaultValue = true)]
        public List<long> BuildConfigurations{ get; }
        
        /// <summary>
        /// The type of allocation method used by the fleet:   * &#x60;ALLOCATION&#x60; - The fleet accepts requests following the allocations-based model.   * &#x60;RESERVATION&#x60; - The fleet accepts requests following the reservations-based model. (Closed Beta) 
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "allocationType", EmitDefaultValue = false)]
        public AllocationTypeOptions AllocationType{ get; }
        
        /// <summary>
        /// A list of usage settings associated with the fleet.
        /// </summary>
        [Preserve]
        [DataMember(Name = "usageSettings", EmitDefaultValue = false)]
        public List<FleetUsageSetting> UsageSettings{ get; }
        
        /// <summary>
        /// Boolean to indicate whether graceful stop is enabled for the fleet. Only valid for reservations-based fleets.
        /// MANUAL MODIFICATION: EmitDefaultValue = false
        /// </summary>
        [Preserve]
        [DataMember(Name = "graceful", EmitDefaultValue = false)]
        public bool Graceful{ get; }
        
        /// <summary>
        /// A list of region associations to create.
        /// </summary>
        [Preserve]
        [DataMember(Name = "regions", IsRequired = true, EmitDefaultValue = true)]
        public List<Region> Regions{ get; }
    
        /// <summary>
        /// The os family that the build is based on.
        /// </summary>
        /// <value>The os family that the build is based on.</value>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OsFamilyOptions
        {
            /// <summary>
            /// Enum LINUX for value: LINUX
            /// </summary>
            [EnumMember(Value = "LINUX")]
            LINUX = 1
        }

        /// <summary>
        /// The type of allocation method used by the fleet:   * &#x60;ALLOCATION&#x60; - The fleet accepts requests following the allocations-based model.   * &#x60;RESERVATION&#x60; - The fleet accepts requests following the reservations-based model. (Closed Beta) 
        /// </summary>
        /// <value>The type of allocation method used by the fleet:   * &#x60;ALLOCATION&#x60; - The fleet accepts requests following the allocations-based model.   * &#x60;RESERVATION&#x60; - The fleet accepts requests following the reservations-based model. (Closed Beta) </value>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AllocationTypeOptions
        {
            /// <summary>
            /// Enum ALLOCATION for value: ALLOCATION
            /// </summary>
            [EnumMember(Value = "ALLOCATION")]
            ALLOCATION = 1,
            /// <summary>
            /// Enum RESERVATION for value: RESERVATION
            /// </summary>
            [EnumMember(Value = "RESERVATION")]
            RESERVATION = 2
        }

        /// <summary>
        /// Formats a MultiplayFleetCreateRequest into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Name != null)
            {
                serializedModel += "name," + Name + ",";
            }
            if (OsID != null)
            {
                serializedModel += "osID," + OsID + ",";
            }
            serializedModel += "osFamily," + OsFamily + ",";
            if (BuildConfigurations != null)
            {
                serializedModel += "buildConfigurations," + BuildConfigurations.ToString() + ",";
            }
            serializedModel += "allocationType," + AllocationType + ",";
            if (UsageSettings != null)
            {
                serializedModel += "usageSettings," + UsageSettings.ToString() + ",";
            }
            serializedModel += "graceful," + Graceful.ToString() + ",";
            if (Regions != null)
            {
                serializedModel += "regions," + Regions.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a MultiplayFleetCreateRequest as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Name != null)
            {
                var nameStringValue = Name.ToString();
                dictionary.Add("name", nameStringValue);
            }
            
            if (OsID != null)
            {
                var osIDStringValue = OsID.ToString();
                dictionary.Add("osID", osIDStringValue);
            }
            
            var osFamilyStringValue = OsFamily.ToString();
            dictionary.Add("osFamily", osFamilyStringValue);
            
            if (BuildConfigurations != null)
            {
                var buildConfigurationsStringValue = BuildConfigurations.ToString();
                dictionary.Add("buildConfigurations", buildConfigurationsStringValue);
            }
            
            var allocationTypeStringValue = AllocationType.ToString();
            dictionary.Add("allocationType", allocationTypeStringValue);
            
            var gracefulStringValue = Graceful.ToString();
            dictionary.Add("graceful", gracefulStringValue);
            
            return dictionary;
        }
    }
}
