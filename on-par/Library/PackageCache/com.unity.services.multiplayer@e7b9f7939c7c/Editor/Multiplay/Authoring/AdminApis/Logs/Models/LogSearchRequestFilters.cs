//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Models
{
    /// <summary>
    /// Filters for a search request.
    /// </summary>
    [Preserve]
    [DataContract(Name = "Log_Search_Request_Filters")]
    internal class LogSearchRequestFilters
    {
        /// <summary>
        /// Filters for a search request.
        /// </summary>
        /// <param name="fleetId">ID of the Fleet.</param>
        /// <param name="serverId">ID or the Server.</param>
        /// <param name="source">Original source of the log event (such as a file on disk)</param>
        /// <param name="from">Start date-time of log entries to query.</param>
        /// <param name="to">End date-time of log entries to query.</param>
        [Preserve]
        public LogSearchRequestFilters(System.Guid fleetId, string serverId, string source, DateTime from = default, DateTime to = default)
        {
            FleetId = fleetId;
            ServerId = serverId;
            Source = source;
            From = from;
            To = to;
        }

        /// <summary>
        /// ID of the Fleet.
        /// </summary>
        [Preserve]
        [DataMember(Name = "fleetId", IsRequired = true, EmitDefaultValue = true)]
        public System.Guid FleetId{ get; }

        /// <summary>
        /// ID or the Server.
        /// </summary>
        [Preserve]
        [DataMember(Name = "serverId", IsRequired = true, EmitDefaultValue = true)]
        public string ServerId{ get; }

        /// <summary>
        /// Original source of the log event (such as a file on disk)
        /// </summary>
        [Preserve]
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = true)]
        public string Source{ get; }

        /// <summary>
        /// Start date-time of log entries to query.
        /// </summary>
        [Preserve]
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public DateTime From{ get; }

        /// <summary>
        /// End date-time of log entries to query.
        /// </summary>
        [Preserve]
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public DateTime To{ get; }

        /// <summary>
        /// Formats a LogSearchRequestFilters into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (FleetId != null)
            {
                serializedModel += "fleetId," + FleetId + ",";
            }
            if (ServerId != null)
            {
                serializedModel += "serverId," + ServerId + ",";
            }
            if (Source != null)
            {
                serializedModel += "source," + Source + ",";
            }
            if (From != null)
            {
                serializedModel += "from," + From.ToString() + ",";
            }
            if (To != null)
            {
                serializedModel += "to," + To.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a LogSearchRequestFilters as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (FleetId != null)
            {
                var fleetIdStringValue = FleetId.ToString();
                dictionary.Add("fleetId", fleetIdStringValue);
            }

            if (ServerId != null)
            {
                var serverIdStringValue = ServerId.ToString();
                dictionary.Add("serverId", serverIdStringValue);
            }

            if (Source != null)
            {
                var sourceStringValue = Source.ToString();
                dictionary.Add("source", sourceStringValue);
            }

            if (From != null)
            {
                var fromStringValue = From.ToString();
                dictionary.Add("from", fromStringValue);
            }

            if (To != null)
            {
                var toStringValue = To.ToString();
                dictionary.Add("to", toStringValue);
            }

            return dictionary;
        }
    }
}
