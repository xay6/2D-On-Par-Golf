//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Servers.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Servers.Models
{
    /// <summary>
    /// A server action log.
    /// </summary>
    [Preserve]
    [DataContract(Name = "Action_Log")]
    internal class ActionLog
    {
        /// <summary>
        /// A server action log.
        /// </summary>
        /// <param name="id">ID of the action log.</param>
        /// <param name="serverID">ID of the associated server.</param>
        /// <param name="actionID">ID of the action logged.</param>
        /// <param name="machineID">ID of the associated machine.</param>
        /// <param name="message">Message with the action log.</param>
        /// <param name="date">Date of the action log.</param>
        /// <param name="attachment">Attachment with the action log.</param>
        [Preserve]
        public ActionLog(long id, long serverID, long actionID, long machineID, string message, DateTime date, string attachment = default)
        {
            Id = id;
            ServerID = serverID;
            ActionID = actionID;
            MachineID = machineID;
            Message = message;
            Attachment = attachment;
            Date = date;
        }

        /// <summary>
        /// ID of the action log.
        /// </summary>
        [Preserve]
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public long Id{ get; }

        /// <summary>
        /// ID of the associated server.
        /// </summary>
        [Preserve]
        [DataMember(Name = "serverID", IsRequired = true, EmitDefaultValue = true)]
        public long ServerID{ get; }

        /// <summary>
        /// ID of the action logged.
        /// </summary>
        [Preserve]
        [DataMember(Name = "actionID", IsRequired = true, EmitDefaultValue = true)]
        public long ActionID{ get; }

        /// <summary>
        /// ID of the associated machine.
        /// </summary>
        [Preserve]
        [DataMember(Name = "machineID", IsRequired = true, EmitDefaultValue = true)]
        public long MachineID{ get; }

        /// <summary>
        /// Message with the action log.
        /// </summary>
        [Preserve]
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message{ get; }

        /// <summary>
        /// Attachment with the action log.
        /// </summary>
        [Preserve]
        [DataMember(Name = "attachment", EmitDefaultValue = false)]
        public string Attachment{ get; }

        /// <summary>
        /// Date of the action log.
        /// </summary>
        [Preserve]
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Date{ get; }

        /// <summary>
        /// Formats a ActionLog into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            serializedModel += "id," + Id.ToString() + ",";
            serializedModel += "serverID," + ServerID.ToString() + ",";
            serializedModel += "actionID," + ActionID.ToString() + ",";
            serializedModel += "machineID," + MachineID.ToString() + ",";
            if (Message != null)
            {
                serializedModel += "message," + Message + ",";
            }
            if (Attachment != null)
            {
                serializedModel += "attachment," + Attachment + ",";
            }
            if (Date != null)
            {
                serializedModel += "date," + Date.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a ActionLog as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            var idStringValue = Id.ToString();
            dictionary.Add("id", idStringValue);

            var serverIDStringValue = ServerID.ToString();
            dictionary.Add("serverID", serverIDStringValue);

            var actionIDStringValue = ActionID.ToString();
            dictionary.Add("actionID", actionIDStringValue);

            var machineIDStringValue = MachineID.ToString();
            dictionary.Add("machineID", machineIDStringValue);

            if (Message != null)
            {
                var messageStringValue = Message.ToString();
                dictionary.Add("message", messageStringValue);
            }

            if (Attachment != null)
            {
                var attachmentStringValue = Attachment.ToString();
                dictionary.Add("attachment", attachmentStringValue);
            }

            if (Date != null)
            {
                var dateStringValue = Date.ToString();
                dictionary.Add("date", dateStringValue);
            }

            return dictionary;
        }
    }
}
