//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.BuildConfigs.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.BuildConfigs.Models
{
    /// <summary>
    /// Request to update a build configuration with the provided configuration.
    /// </summary>
    [Preserve]
    [DataContract(Name = "multiplay.buildConfigurationUpdateRequest")]
    internal class MultiplayBuildConfigurationUpdateRequest
    {
        /// <summary>
        /// Request to update a build configuration with the provided configuration.
        /// </summary>
        /// <param name="name">Name to use for the new build configuration.</param>
        /// <param name="buildID">Build to associate with the new build configuration.</param>
        /// <param name="configuration">List of key/value pairs used to configure this build configuration.</param>
        /// <param name="queryType">Query type supported by this build configuration. Specific types are supported for bespoke use cases but the most commonly used are &#39;sqp&#39;, &#39;a2s&#39; or &#39;none&#39;; if no query capabilities are used. </param>
        /// <param name="binaryPath">Path to the game binary.</param>
        /// <param name="commandLine">Binary launch parameters.</param>
        /// <param name="readiness">A boolean to indicate allocation readiness status.</param>
        /// <param name="cores">The number of CPU cores required per server. Now deprecated, please use fleet-level usage settings instead. For more information see the [server density documentation](https://docs.unity.com/ugs/en-us/manual/game-server-hosting/manual/guides/configure-server-density) </param>
        /// <param name="speed">CPU utilisation per core. Now deprecated, please use fleet-level usage settings instead. For more information see the [server density documentation](https://docs.unity.com/ugs/en-us/manual/game-server-hosting/manual/guides/configure-server-density) </param>
        /// <param name="memory">Maximum memory required per server. Now deprecated, please use fleet-level usage settings instead. For more information see the [server density documentation](https://docs.unity.com/ugs/en-us/manual/game-server-hosting/manual/guides/configure-server-density) </param>
        [Preserve]
        public MultiplayBuildConfigurationUpdateRequest(string name, long buildID, List<ConfigurationPair1> configuration, string queryType, string binaryPath, string commandLine, bool readiness, long cores = default, long speed = default, long memory = default)
        {
            Name = name;
            BuildID = buildID;
            _Configuration = configuration;
            QueryType = queryType;
            BinaryPath = binaryPath;
            CommandLine = commandLine;
            Cores = cores;
            Speed = speed;
            Memory = memory;
            Readiness = readiness;
        }

        /// <summary>
        /// Name to use for the new build configuration.
        /// </summary>
        [Preserve]
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name{ get; }

        /// <summary>
        /// Build to associate with the new build configuration.
        /// </summary>
        [Preserve]
        [DataMember(Name = "buildID", IsRequired = true, EmitDefaultValue = true)]
        public long BuildID{ get; }

        /// <summary>
        /// List of key/value pairs used to configure this build configuration.
        /// </summary>
        [Preserve]
        [DataMember(Name = "configuration", IsRequired = true, EmitDefaultValue = true)]
        public List<ConfigurationPair1> _Configuration{ get; }

        /// <summary>
        /// Query type supported by this build configuration. Specific types are supported for bespoke use cases but the most commonly used are &#39;sqp&#39;, &#39;a2s&#39; or &#39;none&#39;; if no query capabilities are used.
        /// </summary>
        [Preserve]
        [DataMember(Name = "queryType", IsRequired = true, EmitDefaultValue = true)]
        public string QueryType{ get; }

        /// <summary>
        /// Path to the game binary.
        /// </summary>
        [Preserve]
        [DataMember(Name = "binaryPath", IsRequired = true, EmitDefaultValue = true)]
        public string BinaryPath{ get; }

        /// <summary>
        /// Binary launch parameters.
        /// </summary>
        [Preserve]
        [DataMember(Name = "commandLine", IsRequired = true, EmitDefaultValue = true)]
        public string CommandLine{ get; }

        /// <summary>
        /// The number of CPU cores required per server. Now deprecated, please use fleet-level usage settings instead. For more information see the [server density documentation](https://docs.unity.com/ugs/en-us/manual/game-server-hosting/manual/guides/configure-server-density)
        /// </summary>
        [Preserve]
        [DataMember(Name = "cores", EmitDefaultValue = false)]
        public long Cores{ get; }

        /// <summary>
        /// CPU utilisation per core. Now deprecated, please use fleet-level usage settings instead. For more information see the [server density documentation](https://docs.unity.com/ugs/en-us/manual/game-server-hosting/manual/guides/configure-server-density)
        /// </summary>
        [Preserve]
        [DataMember(Name = "speed", EmitDefaultValue = false)]
        public long Speed{ get; }

        /// <summary>
        /// Maximum memory required per server. Now deprecated, please use fleet-level usage settings instead. For more information see the [server density documentation](https://docs.unity.com/ugs/en-us/manual/game-server-hosting/manual/guides/configure-server-density)
        /// </summary>
        [Preserve]
        [DataMember(Name = "memory", EmitDefaultValue = false)]
        public long Memory{ get; }

        /// <summary>
        /// A boolean to indicate allocation readiness status.
        /// </summary>
        [Preserve]
        [DataMember(Name = "readiness", IsRequired = true, EmitDefaultValue = true)]
        public bool Readiness{ get; }

        /// <summary>
        /// Formats a MultiplayBuildConfigurationUpdateRequest into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Name != null)
            {
                serializedModel += "name," + Name + ",";
            }
            serializedModel += "buildID," + BuildID.ToString() + ",";
            if (_Configuration != null)
            {
                serializedModel += "configuration," + _Configuration.ToString() + ",";
            }
            if (QueryType != null)
            {
                serializedModel += "queryType," + QueryType + ",";
            }
            if (BinaryPath != null)
            {
                serializedModel += "binaryPath," + BinaryPath + ",";
            }
            if (CommandLine != null)
            {
                serializedModel += "commandLine," + CommandLine + ",";
            }
            serializedModel += "cores," + Cores.ToString() + ",";
            serializedModel += "speed," + Speed.ToString() + ",";
            serializedModel += "memory," + Memory.ToString() + ",";
            serializedModel += "readiness," + Readiness.ToString();
            return serializedModel;
        }

        /// <summary>
        /// Returns a MultiplayBuildConfigurationUpdateRequest as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Name != null)
            {
                var nameStringValue = Name.ToString();
                dictionary.Add("name", nameStringValue);
            }

            var buildIDStringValue = BuildID.ToString();
            dictionary.Add("buildID", buildIDStringValue);

            if (QueryType != null)
            {
                var queryTypeStringValue = QueryType.ToString();
                dictionary.Add("queryType", queryTypeStringValue);
            }

            if (BinaryPath != null)
            {
                var binaryPathStringValue = BinaryPath.ToString();
                dictionary.Add("binaryPath", binaryPathStringValue);
            }

            if (CommandLine != null)
            {
                var commandLineStringValue = CommandLine.ToString();
                dictionary.Add("commandLine", commandLineStringValue);
            }

            var coresStringValue = Cores.ToString();
            dictionary.Add("cores", coresStringValue);

            var speedStringValue = Speed.ToString();
            dictionary.Add("speed", speedStringValue);

            var memoryStringValue = Memory.ToString();
            dictionary.Add("memory", memoryStringValue);

            var readinessStringValue = Readiness.ToString();
            dictionary.Add("readiness", readinessStringValue);

            return dictionary;
        }
    }
}
