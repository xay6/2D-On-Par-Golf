//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.Scripting;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Servers.Models;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Servers.Scheduler;


namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Servers.Servers
{
    internal static class JsonSerialization
    {
        public static byte[] Serialize<T>(T obj)
        {
            return Encoding.UTF8.GetBytes(SerializeToString(obj));
        }

        public static string SerializeToString<T>(T obj)
        {
            return JsonConvert.SerializeObject(obj, new JsonSerializerSettings{ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore});
        }
    }

    /// <summary>
    /// ServersApiBaseRequest class
    /// </summary>
    [Preserve]
    internal class ServersApiBaseRequest
    {
        /// <summary>
        /// Helper function to add a provided key and value to the provided
        /// query params and to escape the values correctly if it is a URL.
        /// </summary>
        /// <param name="queryParams">A `List/<string/>` of the query parameters.</param>
        /// <param name="key">The key to be added.</param>
        /// <param name="value">The value to be added.</param>
        /// <returns>Returns a `List/<string/>` with the `key` and `value` added to the provided `queryParams`.</returns>
        [Preserve]
        public List<string> AddParamsToQueryParams(List<string> queryParams, string key, string value)
        {
            key = UnityWebRequest.EscapeURL(key);
            value = UnityWebRequest.EscapeURL(value);
            queryParams.Add($"{key}={value}");

            return queryParams;
        }

        /// <summary>
        /// Helper function to add a provided key and list of values to the
        /// provided query params and to escape the values correctly if it is a
        /// URL.
        /// </summary>
        /// <param name="queryParams">A `List/<string/>` of the query parameters.</param>
        /// <param name="key">The key to be added.</param>
        /// <param name="values">List of values to be added.</param>
        /// <param name="style">string for defining the style, currently unused.</param>
        /// <param name="explode">True if query params should be escaped and added separately.</param>
        /// <returns>Returns a `List/<string/>`</returns>
        [Preserve]
        public List<string> AddParamsToQueryParams(List<string> queryParams, string key, List<string> values, string style, bool explode)
        {
            if (explode)
            {
                foreach(var value in values)
                {
                    string escapedValue = UnityWebRequest.EscapeURL(value);
                    queryParams.Add($"{UnityWebRequest.EscapeURL(key)}={escapedValue}");
                }
            }
            else
            {
                string paramString = $"{UnityWebRequest.EscapeURL(key)}=";
                foreach(var value in values)
                {
                    paramString += UnityWebRequest.EscapeURL(value) + ",";
                }
                paramString = paramString.Remove(paramString.Length - 1);
                queryParams.Add(paramString);
            }

            return queryParams;
        }

        /// <summary>
        /// Helper function to add a provided map of keys and values, representing a model, to the
        /// provided query params.
        /// </summary>
        /// <param name="queryParams">A `List/<string/>` of the query parameters.</param>
        /// <param name="modelVars">A `Dictionary` representing the vars of the model</param>
        /// <returns>Returns a `List/<string/>`</returns>
        [Preserve]
        public List<string> AddParamsToQueryParams(List<string> queryParams, Dictionary<string, string> modelVars)
        {
            foreach(var key in modelVars.Keys)
            {
                string escapedValue = UnityWebRequest.EscapeURL(modelVars[key]);
                queryParams.Add($"{UnityWebRequest.EscapeURL(key)}={escapedValue}");
            }

            return queryParams;
        }

        /// <summary>
        /// Helper function to add a provided key and value to the provided
        /// query params and to escape the values correctly if it is a URL.
        /// </summary>
        /// <param name="queryParams">A `List/<string/>` of the query parameters.</param>
        /// <param name="key">The key to be added.</param>
        /// <typeparam name="T">The type of the value to be added.</typeparam>
        /// <param name="value">The value to be added.</param>
        /// <returns>Returns a `List/<string/>`</returns>
        [Preserve]
        public List<string> AddParamsToQueryParams<T>(List<string> queryParams, string key, T value)
        {
            if (queryParams == null)
            {
                queryParams = new List<string>();
            }

            key = UnityWebRequest.EscapeURL(key);
            string valueString = UnityWebRequest.EscapeURL(value.ToString());
            queryParams.Add($"{key}={valueString}");
            return queryParams;
        }

        /// <summary>
        /// Constructs a string representing an array path parameter.
        /// </summary>
        /// <param name="pathParam">The list of values to convert to string.</param>
        /// <returns>String representing the param.</returns>
        [Preserve]
        public string GetPathParamString(List<string> pathParam)
        {
            string paramString = "";
            foreach(var value in pathParam)
            {
                paramString += UnityWebRequest.EscapeURL(value) + ",";
            }
            paramString = paramString.Remove(paramString.Length - 1);
            return paramString;
        }

        /// <summary>
        /// Constructs the body of the request based on IO stream.
        /// </summary>
        /// <param name="stream">The IO stream to use.</param>
        /// <returns>Byte array representing the body.</returns>
        public byte[] ConstructBody(System.IO.Stream stream)
        {
            if (stream != null)
            {
                using (System.IO.MemoryStream ms = new System.IO.MemoryStream())
                {
                    stream.CopyTo(ms);
                    return ms.ToArray();
                }
            }
            return null;
        }

        /// <summary>
        /// Construct the request body based on string value.
        /// </summary>
        /// <param name="s">The input body.</param>
        /// <returns>Byte array representing the body.</returns>
        public byte[] ConstructBody(string s)
        {
            return System.Text.Encoding.UTF8.GetBytes(s);
        }

        /// <summary>
        /// Construct request body based on generic object.
        /// </summary>
        /// <param name="o">The object to use.</param>
        /// <returns>Byte array representing the body.</returns>
        public byte[] ConstructBody(object o)
        {
            return JsonSerialization.Serialize(o);
        }

        /// <summary>
        /// Generate an accept header.
        /// </summary>
        /// <param name="accepts">list of accepts objects.</param>
        /// <returns>The generated accept header.</returns>
        public string GenerateAcceptHeader(string[] accepts)
        {
            if (accepts.Length == 0)
            {
                return null;
            }
            for (int i = 0; i < accepts.Length; ++i)
            {
                if (string.Equals(accepts[i], "application/json", System.StringComparison.OrdinalIgnoreCase))
                {
                    return "application/json";
                }
            }
            return string.Join(", ", accepts);
        }

        private static readonly Regex JsonRegex = new Regex(@"application\/json(;\s)?((charset=utf8|q=[0-1]\.\d)(\s)?)*");

        /// <summary>
        /// Generate Content Type Header.
        /// </summary>
        /// <param name="contentTypes">The content types.</param>
        /// <returns>The Content Type Header.</returns>
        public string GenerateContentTypeHeader(string[] contentTypes)
        {
            if (contentTypes.Length == 0)
            {
                return null;
            }

            for(int i = 0; i < contentTypes.Length; ++i)
            {
                if (!string.IsNullOrWhiteSpace(contentTypes[i]) && JsonRegex.IsMatch(contentTypes[i]))
                {
                    return contentTypes[i];
                }
            }
            return contentTypes[0];
        }

        /// <summary>
        /// Generate multipart form file section.
        /// </summary>
        /// <param name="paramName">The parameter name.</param>
        /// <param name="stream">The file stream to use.</param>
        /// <param name="contentType">The content type.</param>
        /// <returns>Returns a multipart form section.</returns>
        public IMultipartFormSection GenerateMultipartFormFileSection(string paramName, System.IO.FileStream stream, string contentType)
        {
            return new MultipartFormFileSection(paramName, ConstructBody(stream), GetFileName(stream.Name), contentType);
        }

        /// <summary>
        /// Generate multipart form file section.
        /// </summary>
        /// <param name="paramName">The parameter name.</param>
        /// <param name="stream">The IO stream to use.</param>
        /// <param name="contentType">The content type.</param>
        /// <returns>Returns a multipart form section.</returns>
        public IMultipartFormSection GenerateMultipartFormFileSection(string paramName, System.IO.Stream stream, string contentType)
        {
            return new MultipartFormFileSection(paramName, ConstructBody(stream), Guid.NewGuid().ToString(), contentType);
        }

        private string GetFileName(string filePath)
        {
            return System.IO.Path.GetFileName(filePath);
        }
    }

    /// <summary>
    /// GetServerRequest
    /// View a server
    /// </summary>
    [Preserve]
    internal class GetServerRequest : ServersApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for serverId </summary>
        [Preserve]
        public long ServerId { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetServer Request Object.
        /// View a server
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">ID of the environment</param>
        /// <param name="serverId">Server ID</param>
        [Preserve]
        public GetServerRequest(System.Guid projectId, System.Guid environmentId, long serverId)
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            ServerId = serverId;

            PathAndQueryParams = $"/api/multiplay/servers/v4/projects/{projectId}/environments/{environmentId}/servers/{serverId}";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();
            // Generator Does not support base username password, unable to add headers for security schema: ServiceAccount

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetServerActionsRequest
    /// List action logs
    /// </summary>
    [Preserve]
    internal class GetServerActionsRequest : ServersApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for serverId </summary>
        [Preserve]
        public long ServerId { get; }
        /// <summary>Accessor for date </summary>
        [Preserve]
        public DateTime? Date { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetServerActions Request Object.
        /// List action logs
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">ID of the environment</param>
        /// <param name="serverId">Server ID</param>
        /// <param name="date">Date</param>
        [Preserve]
        public GetServerActionsRequest(System.Guid projectId, System.Guid environmentId, long serverId, DateTime? date = default(DateTime?))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            ServerId = serverId;

            Date = date;
            PathAndQueryParams = $"/api/multiplay/servers/v4/projects/{projectId}/environments/{environmentId}/servers/{serverId}/actions";

            List<string> queryParams = new List<string>();

            var dateStringValue = Date.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "date", dateStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();
            // Generator Does not support base username password, unable to add headers for security schema: ServiceAccount

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetServerCCURequest
    /// View server CCU
    /// </summary>
    [Preserve]
    internal class GetServerCCURequest : ServersApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for serverId </summary>
        [Preserve]
        public long ServerId { get; }
        /// <summary>Accessor for period </summary>
        [Preserve]
        public string Period { get; }
        /// <summary>Accessor for start </summary>
        [Preserve]
        public DateTime? Start { get; }
        /// <summary>Accessor for end </summary>
        [Preserve]
        public DateTime? End { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetServerCCU Request Object.
        /// View server CCU
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">ID of the environment</param>
        /// <param name="serverId">Server ID</param>
        /// <param name="period">Period for which analytics should be fetched.</param>
        /// <param name="start">Start timestamp for which analytics should be fetched. (Optional) Exclusively paired with the queryAnalyticsEnd parameter.</param>
        /// <param name="end">End timestamp for which analytics should be fetched. (Optional) Defaults to 'now' if undefined.</param>
        [Preserve]
        public GetServerCCURequest(System.Guid projectId, System.Guid environmentId, long serverId, string period = "day", DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            ServerId = serverId;

            Period = period;
            Start = start;
            End = end;
            PathAndQueryParams = $"/api/multiplay/servers/v4/projects/{projectId}/environments/{environmentId}/servers/{serverId}/ccu";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Period))
            {
                queryParams = AddParamsToQueryParams(queryParams, "period", Period);
            }
            var startStringValue = Start.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "start", startStringValue);
            var endStringValue = End.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "end", endStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();
            // Generator Does not support base username password, unable to add headers for security schema: ServiceAccount

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetServerComputeRequest
    /// View server compute
    /// </summary>
    [Preserve]
    internal class GetServerComputeRequest : ServersApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for serverId </summary>
        [Preserve]
        public long ServerId { get; }
        /// <summary>Accessor for period </summary>
        [Preserve]
        public string Period { get; }
        /// <summary>Accessor for start </summary>
        [Preserve]
        public DateTime? Start { get; }
        /// <summary>Accessor for end </summary>
        [Preserve]
        public DateTime? End { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetServerCompute Request Object.
        /// View server compute
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">ID of the environment</param>
        /// <param name="serverId">Server ID</param>
        /// <param name="period">Period for which analytics should be fetched.</param>
        /// <param name="start">Start timestamp for which analytics should be fetched. (Optional) Exclusively paired with the queryAnalyticsEnd parameter.</param>
        /// <param name="end">End timestamp for which analytics should be fetched. (Optional) Defaults to 'now' if undefined.</param>
        [Preserve]
        public GetServerComputeRequest(System.Guid projectId, System.Guid environmentId, long serverId, string period = "day", DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            ServerId = serverId;

            Period = period;
            Start = start;
            End = end;
            PathAndQueryParams = $"/api/multiplay/servers/v4/projects/{projectId}/environments/{environmentId}/servers/{serverId}/compute";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Period))
            {
                queryParams = AddParamsToQueryParams(queryParams, "period", Period);
            }
            var startStringValue = Start.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "start", startStringValue);
            var endStringValue = End.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "end", endStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();
            // Generator Does not support base username password, unable to add headers for security schema: ServiceAccount

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetServerCrashesRequest
    /// View server crashes
    /// </summary>
    [Preserve]
    internal class GetServerCrashesRequest : ServersApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for serverId </summary>
        [Preserve]
        public long ServerId { get; }
        /// <summary>Accessor for period </summary>
        [Preserve]
        public string Period { get; }
        /// <summary>Accessor for start </summary>
        [Preserve]
        public DateTime? Start { get; }
        /// <summary>Accessor for end </summary>
        [Preserve]
        public DateTime? End { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetServerCrashes Request Object.
        /// View server crashes
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">ID of the environment</param>
        /// <param name="serverId">Server ID</param>
        /// <param name="period">Period for which analytics should be fetched.</param>
        /// <param name="start">Start timestamp for which analytics should be fetched. (Optional) Exclusively paired with the queryAnalyticsEnd parameter.</param>
        /// <param name="end">End timestamp for which analytics should be fetched. (Optional) Defaults to 'now' if undefined.</param>
        [Preserve]
        public GetServerCrashesRequest(System.Guid projectId, System.Guid environmentId, long serverId, string period = "day", DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            ServerId = serverId;

            Period = period;
            Start = start;
            End = end;
            PathAndQueryParams = $"/api/multiplay/servers/v4/projects/{projectId}/environments/{environmentId}/servers/{serverId}/crashes";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Period))
            {
                queryParams = AddParamsToQueryParams(queryParams, "period", Period);
            }
            var startStringValue = Start.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "start", startStringValue);
            var endStringValue = End.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "end", endStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();
            // Generator Does not support base username password, unable to add headers for security schema: ServiceAccount

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetServerEventsRequest
    /// View server events
    /// </summary>
    [Preserve]
    internal class GetServerEventsRequest : ServersApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for serverId </summary>
        [Preserve]
        public long ServerId { get; }
        /// <summary>Accessor for period </summary>
        [Preserve]
        public string Period { get; }
        /// <summary>Accessor for start </summary>
        [Preserve]
        public DateTime? Start { get; }
        /// <summary>Accessor for end </summary>
        [Preserve]
        public DateTime? End { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetServerEvents Request Object.
        /// View server events
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">ID of the environment</param>
        /// <param name="serverId">Server ID</param>
        /// <param name="period">Period for which analytics should be fetched.</param>
        /// <param name="start">Start timestamp for which analytics should be fetched. (Optional) Exclusively paired with the queryAnalyticsEnd parameter.</param>
        /// <param name="end">End timestamp for which analytics should be fetched. (Optional) Defaults to 'now' if undefined.</param>
        [Preserve]
        public GetServerEventsRequest(System.Guid projectId, System.Guid environmentId, long serverId, string period = "day", DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            ServerId = serverId;

            Period = period;
            Start = start;
            End = end;
            PathAndQueryParams = $"/api/multiplay/servers/v4/projects/{projectId}/environments/{environmentId}/servers/{serverId}/events";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Period))
            {
                queryParams = AddParamsToQueryParams(queryParams, "period", Period);
            }
            var startStringValue = Start.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "start", startStringValue);
            var endStringValue = End.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "end", endStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();
            // Generator Does not support base username password, unable to add headers for security schema: ServiceAccount

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetServerLogsLinkRequest
    /// Get Log File Link
    /// </summary>
    [Preserve]
    internal class GetServerLogsLinkRequest : ServersApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for serverId </summary>
        [Preserve]
        public long ServerId { get; }
        /// <summary>Accessor for file </summary>
        [Preserve]
        public string File { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetServerLogsLink Request Object.
        /// Get Log File Link
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">ID of the environment</param>
        /// <param name="serverId">Server ID</param>
        /// <param name="file">Log file name</param>
        [Preserve]
        public GetServerLogsLinkRequest(System.Guid projectId, System.Guid environmentId, long serverId, string file)
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            ServerId = serverId;

            File = file;
            PathAndQueryParams = $"/api/multiplay/servers/v4/projects/{projectId}/environments/{environmentId}/servers/{serverId}/logs/link";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(File))
            {
                queryParams = AddParamsToQueryParams(queryParams, "file", File);
            }
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();
            // Generator Does not support base username password, unable to add headers for security schema: ServiceAccount

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetServerLogsPreviewRequest
    /// Get Preview of Log File
    /// </summary>
    [Preserve]
    internal class GetServerLogsPreviewRequest : ServersApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for serverId </summary>
        [Preserve]
        public long ServerId { get; }
        /// <summary>Accessor for file </summary>
        [Preserve]
        public string File { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetServerLogsPreview Request Object.
        /// Get Preview of Log File
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">ID of the environment</param>
        /// <param name="serverId">Server ID</param>
        /// <param name="file">Log file name</param>
        [Preserve]
        public GetServerLogsPreviewRequest(System.Guid projectId, System.Guid environmentId, long serverId, string file)
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            ServerId = serverId;

            File = file;
            PathAndQueryParams = $"/api/multiplay/servers/v4/projects/{projectId}/environments/{environmentId}/servers/{serverId}/logs/preview";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(File))
            {
                queryParams = AddParamsToQueryParams(queryParams, "file", File);
            }
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();
            // Generator Does not support base username password, unable to add headers for security schema: ServiceAccount

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "text/plain",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// ListServerLocationsRequest
    /// List server locations
    /// </summary>
    [Preserve]
    internal class ListServerLocationsRequest : ServersApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        string PathAndQueryParams;

        /// <summary>
        /// ListServerLocations Request Object.
        /// List server locations
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">ID of the environment</param>
        [Preserve]
        public ListServerLocationsRequest(System.Guid projectId, System.Guid environmentId)
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            PathAndQueryParams = $"/api/multiplay/servers/v4/projects/{projectId}/environments/{environmentId}/servers/locations";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();
            // Generator Does not support base username password, unable to add headers for security schema: ServiceAccount

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// ListServerLogsRequest
    /// List log files
    /// </summary>
    [Preserve]
    internal class ListServerLogsRequest : ServersApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for serverId </summary>
        [Preserve]
        public long ServerId { get; }
        string PathAndQueryParams;

        /// <summary>
        /// ListServerLogs Request Object.
        /// List log files
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">ID of the environment</param>
        /// <param name="serverId">Server ID</param>
        [Preserve]
        public ListServerLogsRequest(System.Guid projectId, System.Guid environmentId, long serverId)
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            ServerId = serverId;

            PathAndQueryParams = $"/api/multiplay/servers/v4/projects/{projectId}/environments/{environmentId}/servers/{serverId}/logs";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();
            // Generator Does not support base username password, unable to add headers for security schema: ServiceAccount

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// ListServersRequest
    /// List servers
    /// </summary>
    [Preserve]
    internal class ListServersRequest : ServersApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for limit </summary>
        [Preserve]
        public string Limit { get; }
        /// <summary>Accessor for lastId </summary>
        [Preserve]
        public System.Guid LastId { get; }
        /// <summary>Accessor for lastVal </summary>
        [Preserve]
        public string LastVal { get; }
        /// <summary>Accessor for sortBy </summary>
        [Preserve]
        public string SortBy { get; }
        /// <summary>Accessor for sortDir </summary>
        [Preserve]
        public string SortDir { get; }
        /// <summary>Accessor for fleetId </summary>
        [Preserve]
        public System.Guid FleetId { get; }
        /// <summary>Accessor for machineId </summary>
        [Preserve]
        public string MachineId { get; }
        /// <summary>Accessor for locationId </summary>
        [Preserve]
        public string LocationId { get; }
        /// <summary>Accessor for buildConfigurationId </summary>
        [Preserve]
        public string BuildConfigurationId { get; }
        /// <summary>Accessor for hardwareType </summary>
        [Preserve]
        public string HardwareType { get; }
        /// <summary>Accessor for partial </summary>
        [Preserve]
        public string Partial { get; }
        /// <summary>Accessor for status </summary>
        [Preserve]
        public string Status { get; }
        string PathAndQueryParams;

        /// <summary>
        /// ListServers Request Object.
        /// List servers
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">ID of the environment</param>
        /// <param name="limit">Results limit</param>
        /// <param name="lastId">Last ID</param>
        /// <param name="lastVal">Last value</param>
        /// <param name="sortBy">Sort column</param>
        /// <param name="sortDir">Sort direction</param>
        /// <param name="fleetId">Fleet ID</param>
        /// <param name="machineId">Machine ID</param>
        /// <param name="locationId">Location ID</param>
        /// <param name="buildConfigurationId">Build Configuration ID</param>
        /// <param name="hardwareType">HardwareType</param>
        /// <param name="partial">Partial Filter</param>
        /// <param name="status">Status</param>
        [Preserve]
        public ListServersRequest(System.Guid projectId, System.Guid environmentId, string limit = default(string), System.Guid lastId = default(System.Guid), string lastVal = default(string), string sortBy = default(string), string sortDir = "ASC", System.Guid fleetId = default(System.Guid), string machineId = default(string), string locationId = default(string), string buildConfigurationId = default(string), string hardwareType = default(string), string partial = default(string), string status = default(string))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            Limit = limit;
            LastId = lastId;
            LastVal = lastVal;
            SortBy = sortBy;
            SortDir = sortDir;
            FleetId = fleetId;
            MachineId = machineId;
            LocationId = locationId;
            BuildConfigurationId = buildConfigurationId;
            HardwareType = hardwareType;
            Partial = partial;
            Status = status;
            PathAndQueryParams = $"/api/multiplay/servers/v4/projects/{projectId}/environments/{environmentId}/servers";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Limit))
            {
                queryParams = AddParamsToQueryParams(queryParams, "limit", Limit);
            }
            if(LastId != Guid.Empty)
            {
                queryParams = AddParamsToQueryParams(queryParams, "lastId", LastId);
            }
            if(!string.IsNullOrEmpty(LastVal))
            {
                queryParams = AddParamsToQueryParams(queryParams, "lastVal", LastVal);
            }
            if(!string.IsNullOrEmpty(SortBy))
            {
                queryParams = AddParamsToQueryParams(queryParams, "sortBy", SortBy);
            }
            if(!string.IsNullOrEmpty(SortDir))
            {
                queryParams = AddParamsToQueryParams(queryParams, "sortDir", SortDir);
            }
            if(FleetId != Guid.Empty)
            {
                queryParams = AddParamsToQueryParams(queryParams, "fleetId", FleetId);
            }
            if(!string.IsNullOrEmpty(MachineId))
            {
                queryParams = AddParamsToQueryParams(queryParams, "machineId", MachineId);
            }
            if(!string.IsNullOrEmpty(LocationId))
            {
                queryParams = AddParamsToQueryParams(queryParams, "locationId", LocationId);
            }
            if(!string.IsNullOrEmpty(BuildConfigurationId))
            {
                queryParams = AddParamsToQueryParams(queryParams, "buildConfigurationId", BuildConfigurationId);
            }
            if(!string.IsNullOrEmpty(HardwareType))
            {
                queryParams = AddParamsToQueryParams(queryParams, "hardwareType", HardwareType);
            }
            if(!string.IsNullOrEmpty(Partial))
            {
                queryParams = AddParamsToQueryParams(queryParams, "partial", Partial);
            }
            if(!string.IsNullOrEmpty(Status))
            {
                queryParams = AddParamsToQueryParams(queryParams, "status", Status);
            }
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();
            // Generator Does not support base username password, unable to add headers for security schema: ServiceAccount

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// TriggerServerActionRequest
    /// Trigger action
    /// </summary>
    [Preserve]
    internal class TriggerServerActionRequest : ServersApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for serverId </summary>
        [Preserve]
        public long ServerId { get; }
        /// <summary>Accessor for actionRequest </summary>
        [Preserve]
        public Unity.Services.Multiplay.Authoring.Editor.AdminApis.Servers.Models.ActionRequest ActionRequest { get; }
        string PathAndQueryParams;

        /// <summary>
        /// TriggerServerAction Request Object.
        /// Trigger action
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">ID of the environment</param>
        /// <param name="serverId">Server ID</param>
        /// <param name="actionRequest">ActionRequest param</param>
        [Preserve]
        public TriggerServerActionRequest(System.Guid projectId, System.Guid environmentId, long serverId, Unity.Services.Multiplay.Authoring.Editor.AdminApis.Servers.Models.ActionRequest actionRequest = default(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Servers.Models.ActionRequest))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            ServerId = serverId;

            ActionRequest = actionRequest;
            PathAndQueryParams = $"/api/multiplay/servers/v4/projects/{projectId}/environments/{environmentId}/servers/{serverId}/actions";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            if(ActionRequest != null)
            {
                return ConstructBody(ActionRequest);
            }
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();
            // Generator Does not support base username password, unable to add headers for security schema: ServiceAccount

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
                "application/json"
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "POST";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
}
