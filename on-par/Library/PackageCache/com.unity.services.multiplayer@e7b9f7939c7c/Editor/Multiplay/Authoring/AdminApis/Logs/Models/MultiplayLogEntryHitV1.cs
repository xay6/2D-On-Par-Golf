//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Models
{
    /// <summary>
    /// A single log event returned by the search, including identifying metadata.
    /// </summary>
    [Preserve]
    [DataContract(Name = "multiplay.logEntryHit.v1")]
    internal class MultiplayLogEntryHitV1
    {
        /// <summary>
        /// A single log event returned by the search, including identifying metadata.
        /// </summary>
        /// <param name="message">The log line message.</param>
        /// <param name="metadata">metadata param</param>
        [Preserve]
        public MultiplayLogEntryHitV1(string message, LogEntryMetadata metadata)
        {
            Message = message;
            Metadata = metadata;
        }

        /// <summary>
        /// The log line message.
        /// </summary>
        [Preserve]
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message{ get; }

        /// <summary>
        /// Parameter metadata of MultiplayLogEntryHitV1
        /// </summary>
        [Preserve]
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public LogEntryMetadata Metadata{ get; }

        /// <summary>
        /// Formats a MultiplayLogEntryHitV1 into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Message != null)
            {
                serializedModel += "message," + Message + ",";
            }
            if (Metadata != null)
            {
                serializedModel += "metadata," + Metadata.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a MultiplayLogEntryHitV1 as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Message != null)
            {
                var messageStringValue = Message.ToString();
                dictionary.Add("message", messageStringValue);
            }

            return dictionary;
        }
    }
}
