//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Models
{
    /// <summary>
    /// Single Inventory item for a fleet.
    /// </summary>
    [Preserve]
    [DataContract(Name = "Fleet_Inventory_Item")]
    internal class FleetInventoryItem
    {
        /// <summary>
        /// Single Inventory item for a fleet.
        /// </summary>
        /// <param name="hardwareType">The hardware type of a machine.</param>
        /// <param name="machineType">Machine type.</param>
        /// <param name="machineFamily">Machine Family.</param>
        /// <param name="machineSpecification">Machine Specification.</param>
        /// <param name="memory">RAM per server in MB.</param>
        /// <param name="speed">CPU speed per server in MHz.</param>
        /// <param name="numberOfCpus">Number of physical CPU cores.</param>
        /// <param name="machineCount">Number of machines.</param>
        [Preserve]
        public FleetInventoryItem(HardwareTypeOptions hardwareType, string machineType, string machineFamily, string machineSpecification, long memory, long speed, long numberOfCpus, long machineCount)
        {
            HardwareType = hardwareType;
            MachineType = machineType;
            MachineFamily = machineFamily;
            MachineSpecification = machineSpecification;
            Memory = memory;
            Speed = speed;
            NumberOfCpus = numberOfCpus;
            MachineCount = machineCount;
        }

        /// <summary>
        /// The hardware type of a machine.
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "hardwareType", IsRequired = true, EmitDefaultValue = true)]
        public HardwareTypeOptions HardwareType{ get; }
        
        /// <summary>
        /// Machine type.
        /// </summary>
        [Preserve]
        [DataMember(Name = "machineType", IsRequired = true, EmitDefaultValue = true)]
        public string MachineType{ get; }
        
        /// <summary>
        /// Machine Family.
        /// </summary>
        [Preserve]
        [DataMember(Name = "machineFamily", IsRequired = true, EmitDefaultValue = true)]
        public string MachineFamily{ get; }
        
        /// <summary>
        /// Machine Specification.
        /// </summary>
        [Preserve]
        [DataMember(Name = "machineSpecification", IsRequired = true, EmitDefaultValue = true)]
        public string MachineSpecification{ get; }
        
        /// <summary>
        /// RAM per server in MB.
        /// </summary>
        [Preserve]
        [DataMember(Name = "memory", IsRequired = true, EmitDefaultValue = true)]
        public long Memory{ get; }
        
        /// <summary>
        /// CPU speed per server in MHz.
        /// </summary>
        [Preserve]
        [DataMember(Name = "speed", IsRequired = true, EmitDefaultValue = true)]
        public long Speed{ get; }
        
        /// <summary>
        /// Number of physical CPU cores.
        /// </summary>
        [Preserve]
        [DataMember(Name = "numberOfCpus", IsRequired = true, EmitDefaultValue = true)]
        public long NumberOfCpus{ get; }
        
        /// <summary>
        /// Number of machines.
        /// </summary>
        [Preserve]
        [DataMember(Name = "machineCount", IsRequired = true, EmitDefaultValue = true)]
        public long MachineCount{ get; }
    
        /// <summary>
        /// The hardware type of a machine.
        /// </summary>
        /// <value>The hardware type of a machine.</value>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HardwareTypeOptions
        {
            /// <summary>
            /// Enum CLOUD for value: CLOUD
            /// </summary>
            [EnumMember(Value = "CLOUD")]
            CLOUD = 1,
            /// <summary>
            /// Enum METAL for value: METAL
            /// </summary>
            [EnumMember(Value = "METAL")]
            METAL = 2
        }

        /// <summary>
        /// Formats a FleetInventoryItem into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            serializedModel += "hardwareType," + HardwareType + ",";
            if (MachineType != null)
            {
                serializedModel += "machineType," + MachineType + ",";
            }
            if (MachineFamily != null)
            {
                serializedModel += "machineFamily," + MachineFamily + ",";
            }
            if (MachineSpecification != null)
            {
                serializedModel += "machineSpecification," + MachineSpecification + ",";
            }
            serializedModel += "memory," + Memory.ToString() + ",";
            serializedModel += "speed," + Speed.ToString() + ",";
            serializedModel += "numberOfCpus," + NumberOfCpus.ToString() + ",";
            serializedModel += "machineCount," + MachineCount.ToString();
            return serializedModel;
        }

        /// <summary>
        /// Returns a FleetInventoryItem as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            var hardwareTypeStringValue = HardwareType.ToString();
            dictionary.Add("hardwareType", hardwareTypeStringValue);
            
            if (MachineType != null)
            {
                var machineTypeStringValue = MachineType.ToString();
                dictionary.Add("machineType", machineTypeStringValue);
            }
            
            if (MachineFamily != null)
            {
                var machineFamilyStringValue = MachineFamily.ToString();
                dictionary.Add("machineFamily", machineFamilyStringValue);
            }
            
            if (MachineSpecification != null)
            {
                var machineSpecificationStringValue = MachineSpecification.ToString();
                dictionary.Add("machineSpecification", machineSpecificationStringValue);
            }
            
            var memoryStringValue = Memory.ToString();
            dictionary.Add("memory", memoryStringValue);
            
            var speedStringValue = Speed.ToString();
            dictionary.Add("speed", speedStringValue);
            
            var numberOfCpusStringValue = NumberOfCpus.ToString();
            dictionary.Add("numberOfCpus", numberOfCpusStringValue);
            
            var machineCountStringValue = MachineCount.ToString();
            dictionary.Add("machineCount", machineCountStringValue);
            
            return dictionary;
        }
    }
}
