//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Logs.Models
{
    /// <summary>
    /// Request for a signed URL to download the specified source file
    /// </summary>
    [Preserve]
    [DataContract(Name = "multiplay.downloadLinkRequest.v1")]
    internal class MultiplayDownloadLinkRequestV1
    {
        /// <summary>
        /// Request for a signed URL to download the specified source file
        /// </summary>
        /// <param name="source">Source of the log file to download</param>
        [Preserve]
        public MultiplayDownloadLinkRequestV1(string source)
        {
            Source = source;
        }

        /// <summary>
        /// Source of the log file to download
        /// </summary>
        [Preserve]
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = true)]
        public string Source{ get; }

        /// <summary>
        /// Formats a MultiplayDownloadLinkRequestV1 into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Source != null)
            {
                serializedModel += "source," + Source;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a MultiplayDownloadLinkRequestV1 as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Source != null)
            {
                var sourceStringValue = Source.ToString();
                dictionary.Add("source", sourceStringValue);
            }

            return dictionary;
        }
    }
}
