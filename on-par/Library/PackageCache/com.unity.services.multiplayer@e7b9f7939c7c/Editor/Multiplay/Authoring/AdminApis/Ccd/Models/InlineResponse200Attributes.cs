//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Models
{
    /// <summary>
    /// InlineResponse200Attributes model
    /// </summary>
    [Preserve]
    [DataContract(Name = "inline_response_200_attributes")]
    internal class InlineResponse200Attributes
    {
        /// <summary>
        /// Creates an instance of InlineResponse200Attributes.
        /// </summary>
        /// <param name="promoteOnly">promoteOnly param</param>
        [Preserve]
        public InlineResponse200Attributes(bool promoteOnly = default)
        {
            PromoteOnly = promoteOnly;
        }

        /// <summary>
        /// Parameter promote_only of InlineResponse200Attributes
        /// </summary>
        [Preserve]
        [DataMember(Name = "promote_only", EmitDefaultValue = true)]
        public bool PromoteOnly{ get; }

        /// <summary>
        /// Formats a InlineResponse200Attributes into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            serializedModel += "promote_only," + PromoteOnly.ToString();
            return serializedModel;
        }

        /// <summary>
        /// Returns a InlineResponse200Attributes as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            var promote_onlyStringValue = PromoteOnly.ToString();
            dictionary.Add("promote_only", promote_onlyStringValue);

            return dictionary;
        }
    }
}
