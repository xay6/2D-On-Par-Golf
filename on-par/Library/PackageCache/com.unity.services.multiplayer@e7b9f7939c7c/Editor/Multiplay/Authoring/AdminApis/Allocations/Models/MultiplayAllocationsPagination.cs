//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Allocations.Http;



namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Allocations.Models
{
    /// <summary>
    /// Pagination data for a list of test allocations.
    /// </summary>
    [Preserve]
    [DataContract(Name = "multiplay.allocations.Pagination")]
    internal class MultiplayAllocationsPagination
    {
        /// <summary>
        /// Pagination data for a list of test allocations.
        /// </summary>
        /// <param name="limit">The number of results returned.</param>
        /// <param name="offset">The offset for the results returned.</param>
        [Preserve]
        public MultiplayAllocationsPagination(int limit = default, int offset = default)
        {
            Limit = limit;
            Offset = offset;
        }

        /// <summary>
        /// The number of results returned.
        /// </summary>
        [Preserve]
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit{ get; }

        /// <summary>
        /// The offset for the results returned.
        /// </summary>
        [Preserve]
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public int Offset{ get; }

        /// <summary>
        /// Formats a MultiplayAllocationsPagination into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            serializedModel += "limit," + Limit.ToString() + ",";
            serializedModel += "offset," + Offset.ToString();
            return serializedModel;
        }

        /// <summary>
        /// Returns a MultiplayAllocationsPagination as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            var limitStringValue = Limit.ToString();
            dictionary.Add("limit", limitStringValue);

            var offsetStringValue = Offset.ToString();
            dictionary.Add("offset", offsetStringValue);

            return dictionary;
        }
    }
}
