//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Matchmaker.Http;



namespace Unity.Services.Matchmaker.Models
{
    /// <summary>
    /// MatchProperties model
    /// </summary>
    [Preserve]
    [DataContract(Name = "MatchProperties")]
    public class MatchProperties
    {
        /// <summary>
        /// Creates an instance of MatchProperties.
        /// </summary>
        /// <param name="teams">The list of teams in the match.</param>
        /// <param name="players">The list of players in the match.</param>
        /// <param name="region">The region where the server is allocated.</param>
        /// <param name="backfillTicketId">The unique ID of the backfill ticket.</param>
        [Preserve]
        public MatchProperties(List<Team> teams = default, List<Player> players = default, string region = default, string backfillTicketId = default)
        {
            Teams = teams;
            Players = players;
            Region = region;
            BackfillTicketId = backfillTicketId;
        }

        /// <summary>
        /// The list of teams in the match.
        /// </summary>
        [Preserve]
        [DataMember(Name = "teams", EmitDefaultValue = false)]
        public List<Team> Teams{ get; }

        /// <summary>
        /// The list of players in the match.
        /// </summary>
        [Preserve]
        [DataMember(Name = "players", EmitDefaultValue = false)]
        public List<Player> Players{ get; }

        /// <summary>
        /// The region where the server is allocated.
        /// </summary>
        [Preserve]
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region{ get; }

        /// <summary>
        /// The unique ID of the backfill ticket.
        /// </summary>
        [Preserve]
        [DataMember(Name = "backfillTicketId", EmitDefaultValue = false)]
        public string BackfillTicketId{ get; }

        /// <summary>
        /// Formats a MatchProperties into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (Teams != null)
            {
                serializedModel += "teams," + Teams.ToString() + ",";
            }
            if (Players != null)
            {
                serializedModel += "players," + Players.ToString() + ",";
            }
            if (Region != null)
            {
                serializedModel += "region," + Region + ",";
            }
            if (BackfillTicketId != null)
            {
                serializedModel += "backfillTicketId," + BackfillTicketId;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a MatchProperties as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (Region != null)
            {
                var regionStringValue = Region.ToString();
                dictionary.Add("region", regionStringValue);
            }

            if (BackfillTicketId != null)
            {
                var backfillTicketIdStringValue = BackfillTicketId.ToString();
                dictionary.Add("backfillTicketId", backfillTicketIdStringValue);
            }

            return dictionary;
        }
    }
}
