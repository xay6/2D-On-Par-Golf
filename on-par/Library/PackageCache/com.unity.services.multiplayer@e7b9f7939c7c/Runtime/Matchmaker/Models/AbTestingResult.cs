//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Matchmaker.Http;



namespace Unity.Services.Matchmaker.Models
{
    /// <summary>
    /// AbTestingResult model
    /// </summary>
    [Preserve]
    [DataContract(Name = "AbTestingResult")]
    public class AbTestingResult
    {
        /// <summary>
        /// Creates an instance of AbTestingResult.
        /// </summary>
        /// <param name="isAbTesting">Flag indicating if the ticket is part of an AB testing and is uses an override setup in Player Engagement</param>
        /// <param name="variantId">The id of the variant the ticket has been assigned to</param>
        /// <param name="poolId">The id of the pool the ticket was assigned to</param>
        /// <param name="basePoolId">The id of the base pool attached to the ticket</param>
        [Preserve]
        public AbTestingResult(bool isAbTesting = default, string variantId = default, string poolId = default, string basePoolId = default)
        {
            IsAbTesting = isAbTesting;
            VariantId = variantId;
            PoolId = poolId;
            BasePoolId = basePoolId;
        }

        /// <summary>
        /// Flag indicating if the ticket is part of an AB testing and is uses an override setup in Player Engagement
        /// </summary>
        [Preserve]
        [DataMember(Name = "isAbTesting", EmitDefaultValue = true)]
        public bool IsAbTesting{ get; }

        /// <summary>
        /// The id of the variant the ticket has been assigned to
        /// </summary>
        [Preserve]
        [DataMember(Name = "variantId", EmitDefaultValue = false)]
        public string VariantId{ get; }

        /// <summary>
        /// The id of the pool the ticket was assigned to
        /// </summary>
        [Preserve]
        [DataMember(Name = "poolId", EmitDefaultValue = false)]
        public string PoolId{ get; }

        /// <summary>
        /// The id of the base pool attached to the ticket
        /// </summary>
        [Preserve]
        [DataMember(Name = "basePoolId", EmitDefaultValue = false)]
        public string BasePoolId{ get; }

        /// <summary>
        /// Formats a AbTestingResult into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            serializedModel += "isAbTesting," + IsAbTesting.ToString() + ",";
            if (VariantId != null)
            {
                serializedModel += "variantId," + VariantId + ",";
            }
            if (PoolId != null)
            {
                serializedModel += "poolId," + PoolId + ",";
            }
            if (BasePoolId != null)
            {
                serializedModel += "basePoolId," + BasePoolId;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a AbTestingResult as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            var isAbTestingStringValue = IsAbTesting.ToString();
            dictionary.Add("isAbTesting", isAbTestingStringValue);

            if (VariantId != null)
            {
                var variantIdStringValue = VariantId.ToString();
                dictionary.Add("variantId", variantIdStringValue);
            }

            if (PoolId != null)
            {
                var poolIdStringValue = PoolId.ToString();
                dictionary.Add("poolId", poolIdStringValue);
            }

            if (BasePoolId != null)
            {
                var basePoolIdStringValue = BasePoolId.ToString();
                dictionary.Add("basePoolId", basePoolIdStringValue);
            }

            return dictionary;
        }
    }
}
