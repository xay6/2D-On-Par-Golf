//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Matchmaker.Http;



namespace Unity.Services.Matchmaker.Models
{
    /// <summary>
    /// MultiplayAssignment model
    /// </summary>
    [Preserve]
    [DataContract(Name = "MultiplayAssignment")]
    public class MultiplayAssignment
    {
        /// <summary>
        /// Creates an instance of MultiplayAssignment.
        /// </summary>
        /// <param name="assignmentType">assignmentType param</param>
        /// <param name="message">message param</param>
        /// <param name="status">The status of the assignment is one of Timeout, Failed, InProgress, Found</param>
        /// <param name="ip">ip param</param>
        /// <param name="port">port param</param>
        /// <param name="matchId">Unique ID of the match.</param>
        [Preserve]
        public MultiplayAssignment(string assignmentType, string message = default, StatusOptions status = default, string ip = default, int? port = default, string matchId = default)
        {
            AssignmentType = assignmentType;
            Message = message;
            Status = status;
            Ip = ip;
            Port = port;
            MatchId = matchId;
        }

        /// <summary>
        /// Parameter assignmentType of MultiplayAssignment
        /// </summary>
        [Preserve]
        [DataMember(Name = "assignmentType", IsRequired = true, EmitDefaultValue = true)]
        public string AssignmentType{ get; }

        /// <summary>
        /// Parameter message of MultiplayAssignment
        /// </summary>
        [Preserve]
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message{ get; }

        /// <summary>
        /// The status of the assignment is one of Timeout, Failed, InProgress, Found
        /// </summary>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusOptions Status{ get; }

        /// <summary>
        /// Parameter ip of MultiplayAssignment
        /// </summary>
        [Preserve]
        [DataMember(Name = "ip", EmitDefaultValue = false)]
        public string Ip{ get; }

        /// <summary>
        /// Parameter port of MultiplayAssignment
        /// </summary>
        [Preserve]
        [DataMember(Name = "port", EmitDefaultValue = false)]
        public int? Port{ get; }

        /// <summary>
        /// Unique ID of the match.
        /// </summary>
        [Preserve]
        [DataMember(Name = "matchId", EmitDefaultValue = false)]
        public string MatchId{ get; }

        /// <summary>
        /// The status of the assignment is one of Timeout, Failed, InProgress, Found
        /// </summary>
        /// <value>The status of the assignment is one of Timeout, Failed, InProgress, Found</value>
        [Preserve]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusOptions
        {
            /// <summary>
            /// Enum Timeout for value: Timeout
            /// </summary>
            [EnumMember(Value = "Timeout")]
            Timeout = 1,
            /// <summary>
            /// Enum Failed for value: Failed
            /// </summary>
            [EnumMember(Value = "Failed")]
            Failed = 2,
            /// <summary>
            /// Enum InProgress for value: InProgress
            /// </summary>
            [EnumMember(Value = "InProgress")]
            InProgress = 3,
            /// <summary>
            /// Enum Found for value: Found
            /// </summary>
            [EnumMember(Value = "Found")]
            Found = 4
        }

        /// <summary>
        /// Formats a MultiplayAssignment into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (AssignmentType != null)
            {
                serializedModel += "assignmentType," + AssignmentType + ",";
            }
            if (Message != null)
            {
                serializedModel += "message," + Message + ",";
            }
            serializedModel += "status," + Status + ",";
            if (Ip != null)
            {
                serializedModel += "ip," + Ip + ",";
            }
            if (Port != null)
            {
                serializedModel += "port," + Port.ToString() + ",";
            }
            if (MatchId != null)
            {
                serializedModel += "matchId," + MatchId;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a MultiplayAssignment as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (AssignmentType != null)
            {
                var assignmentTypeStringValue = AssignmentType.ToString();
                dictionary.Add("assignmentType", assignmentTypeStringValue);
            }

            if (Message != null)
            {
                var messageStringValue = Message.ToString();
                dictionary.Add("message", messageStringValue);
            }

            var statusStringValue = Status.ToString();
            dictionary.Add("status", statusStringValue);

            if (Ip != null)
            {
                var ipStringValue = Ip.ToString();
                dictionary.Add("ip", ipStringValue);
            }

            if (Port != null)
            {
                var portStringValue = Port.ToString();
                dictionary.Add("port", portStringValue);
            }

            if (MatchId != null)
            {
                var matchIdStringValue = MatchId.ToString();
                dictionary.Add("matchId", matchIdStringValue);
            }

            return dictionary;
        }
    }
}
