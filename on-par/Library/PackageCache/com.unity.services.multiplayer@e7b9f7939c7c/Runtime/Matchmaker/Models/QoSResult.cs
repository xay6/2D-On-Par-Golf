//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Matchmaker.Http;

#if UGS_MATCHMAKER_QOS
using Unity.Services.Qos;
#endif


namespace Unity.Services.Matchmaker.Models
{
    /// <summary>
    /// Quality of Service (QoS) result for a single region.
    /// </summary>
    [Preserve]
    [DataContract(Name = "QosResult")]
    public class QosResult
    {
#if UGS_MATCHMAKER_QOS
        public QosResult(IQosAnnotatedResult qosAnnotatedResult)
        {
            RegionId = qosAnnotatedResult.Region;
            PacketLoss = qosAnnotatedResult.PacketLossPercent;
            Latency = qosAnnotatedResult.AverageLatencyMs;
            Annotations = qosAnnotatedResult.Annotations;
        }
#endif



        /// <summary>
        /// Quality of Service (QoS) result for a single region.
        /// </summary>
        /// <param name="regionId">Contains the ID of the QoS region this result belongs to.</param>
        /// <param name="packetLoss">The Packet Loss for this QoS region. This is a ratio, value should be between 0.0 (no loss) and 1.0 (100% packet loss).</param>
        /// <param name="latency">The Latency for this QoS region.</param>
        /// <param name="annotations">A dictionary of server annotations.</param>
        [Preserve]
        public QosResult(string regionId, double? packetLoss, double? latency, Dictionary<string, List<string>> annotations = default)
        {
            RegionId = regionId;
            PacketLoss = packetLoss;
            Latency = latency;
            Annotations = annotations;
        }

        /// <summary>
        /// Contains the ID of the QoS region this result belongs to.
        /// </summary>
        [Preserve]
        [DataMember(Name = "regionId", IsRequired = true, EmitDefaultValue = true)]
        public string RegionId{ get; }

        /// <summary>
        /// The Packet Loss for this QoS region. This is a ratio, value should be between 0.0 (no loss) and 1.0 (100% packet loss).
        /// </summary>
        [Preserve]
        [DataMember(Name = "packetLoss", IsRequired = true, EmitDefaultValue = true)]
        public double? PacketLoss{ get; }

        /// <summary>
        /// The Latency for this QoS region.
        /// </summary>
        [Preserve]
        [DataMember(Name = "latency", IsRequired = true, EmitDefaultValue = true)]
        public double? Latency{ get; }

        /// <summary>
        /// A dictionary of server annotations.
        /// </summary>
        [Preserve]
        [DataMember(Name = "annotations", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> Annotations{ get; }

        /// <summary>
        /// Formats a QosResult into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (RegionId != null)
            {
                serializedModel += "regionId," + RegionId + ",";
            }
            if (PacketLoss != null)
            {
                serializedModel += "packetLoss," + PacketLoss.ToString() + ",";
            }
            if (Latency != null)
            {
                serializedModel += "latency," + Latency.ToString() + ",";
            }
            if (Annotations != null)
            {
                serializedModel += "annotations," + Annotations.ToString();
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a QosResult as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (RegionId != null)
            {
                var regionIdStringValue = RegionId.ToString();
                dictionary.Add("regionId", regionIdStringValue);
            }

            if (PacketLoss != null)
            {
                var packetLossStringValue = PacketLoss.ToString();
                dictionary.Add("packetLoss", packetLossStringValue);
            }

            if (Latency != null)
            {
                var latencyStringValue = Latency.ToString();
                dictionary.Add("latency", latencyStringValue);
            }

            if (Annotations != null)
            {
                var annotationsStringValue = Annotations.ToString();
                dictionary.Add("annotations", annotationsStringValue);
            }

            return dictionary;
        }
    }
}
