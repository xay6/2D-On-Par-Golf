//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Matchmaker.Http;



namespace Unity.Services.Matchmaker.Models
{
    /// <summary>
    /// An object that holds a dictionary of pool overrides, indexed by the base pool ID. A ticket whose attributes would have placed it in the base pool will instead be placed in the corresponding variant pool if there is an override for this base pool.
    /// </summary>
    [Preserve]
    [DataContract(Name = "Override")]
    public class Override
    {
        /// <summary>
        /// An object that holds a dictionary of pool overrides, indexed by the base pool ID. A ticket whose attributes would have placed it in the base pool will instead be placed in the corresponding variant pool if there is an override for this base pool.
        /// </summary>
        /// <param name="basePoolId">The id of the base pool linked to that override</param>
        /// <param name="variantId">The Id of the variant that identifies this override in Player Engagement.</param>
        /// <param name="poolOverrideId">The Id of the pool that overrides the base pool. If null, this mean the ticket falls into the control group and will get assigned the base pool.</param>
        [Preserve]
        public Override(string basePoolId = default, string variantId = default, string poolOverrideId = default)
        {
            BasePoolId = basePoolId;
            VariantId = variantId;
            PoolOverrideId = poolOverrideId;
        }

        /// <summary>
        /// The id of the base pool linked to that override
        /// </summary>
        [Preserve]
        [DataMember(Name = "basePoolId", EmitDefaultValue = false)]
        public string BasePoolId{ get; }

        /// <summary>
        /// The Id of the variant that identifies this override in Player Engagement.
        /// </summary>
        [Preserve]
        [DataMember(Name = "variantId", EmitDefaultValue = false)]
        public string VariantId{ get; }

        /// <summary>
        /// The Id of the pool that overrides the base pool. If null, this mean the ticket falls into the control group and will get assigned the base pool.
        /// </summary>
        [Preserve]
        [DataMember(Name = "poolOverrideId", EmitDefaultValue = false)]
        public string PoolOverrideId{ get; }

        /// <summary>
        /// Formats a Override into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (BasePoolId != null)
            {
                serializedModel += "basePoolId," + BasePoolId + ",";
            }
            if (VariantId != null)
            {
                serializedModel += "variantId," + VariantId + ",";
            }
            if (PoolOverrideId != null)
            {
                serializedModel += "poolOverrideId," + PoolOverrideId;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a Override as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (BasePoolId != null)
            {
                var basePoolIdStringValue = BasePoolId.ToString();
                dictionary.Add("basePoolId", basePoolIdStringValue);
            }

            if (VariantId != null)
            {
                var variantIdStringValue = VariantId.ToString();
                dictionary.Add("variantId", variantIdStringValue);
            }

            if (PoolOverrideId != null)
            {
                var poolOverrideIdStringValue = PoolOverrideId.ToString();
                dictionary.Add("poolOverrideId", poolOverrideIdStringValue);
            }

            return dictionary;
        }
    }
}
