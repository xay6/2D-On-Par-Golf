//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Matchmaker.Http;



namespace Unity.Services.Matchmaker.Models
{
    /// <summary>
    /// Represents the data that is stored by the Matchmaker service when the server is allocated
    /// </summary>
    [Preserve]
    [DataContract(Name = "MatchmakingResults")]
    public class MatchmakingResults
    {
        /// <summary>
        /// Represents the data that is stored by the Matchmaker service when the server is allocated
        /// </summary>
        /// <param name="matchProperties">matchProperties param</param>
        /// <param name="generatorName">generatorName param</param>
        /// <param name="queueName">Matchmaking queue that allocated the server.</param>
        /// <param name="poolName">Matchmaking pool that allocated the server.</param>
        /// <param name="environmentId">Unity Gaming Services Project Environment ID.</param>
        /// <param name="backfillTicketId">The unique ID of the backfill ticket.</param>
        /// <param name="matchId">Unique ID of the match,</param>
        /// <param name="poolId">The ID of pool that the match is in.</param>
        [Preserve]
        public MatchmakingResults(MatchProperties matchProperties = default, string generatorName = default, string queueName = default, string poolName = default, string environmentId = default, string backfillTicketId = default, string matchId = default, string poolId = default)
        {
            MatchProperties = matchProperties;
            GeneratorName = generatorName;
            QueueName = queueName;
            PoolName = poolName;
            EnvironmentId = environmentId;
            BackfillTicketId = backfillTicketId;
            MatchId = matchId;
            PoolId = poolId;
        }

        /// <summary>
        /// Parameter matchProperties of MatchmakingResults
        /// </summary>
        [Preserve]
        [DataMember(Name = "matchProperties", EmitDefaultValue = false)]
        public MatchProperties MatchProperties{ get; }

        /// <summary>
        /// Parameter generatorName of MatchmakingResults
        /// </summary>
        [Preserve]
        [DataMember(Name = "generatorName", EmitDefaultValue = false)]
        public string GeneratorName{ get; }

        /// <summary>
        /// Matchmaking queue that allocated the server.
        /// </summary>
        [Preserve]
        [DataMember(Name = "queueName", EmitDefaultValue = false)]
        public string QueueName{ get; }

        /// <summary>
        /// Matchmaking pool that allocated the server.
        /// </summary>
        [Preserve]
        [DataMember(Name = "poolName", EmitDefaultValue = false)]
        public string PoolName{ get; }

        /// <summary>
        /// Unity Gaming Services Project Environment ID.
        /// </summary>
        [Preserve]
        [DataMember(Name = "environmentId", EmitDefaultValue = false)]
        public string EnvironmentId{ get; }

        /// <summary>
        /// The unique ID of the backfill ticket.
        /// </summary>
        [Preserve]
        [DataMember(Name = "backfillTicketId", EmitDefaultValue = false)]
        public string BackfillTicketId{ get; }

        /// <summary>
        /// Unique ID of the match,
        /// </summary>
        [Preserve]
        [DataMember(Name = "matchId", EmitDefaultValue = false)]
        public string MatchId{ get; }

        /// <summary>
        /// The ID of pool that the match is in.
        /// </summary>
        [Preserve]
        [DataMember(Name = "poolId", EmitDefaultValue = false)]
        public string PoolId{ get; }

        /// <summary>
        /// Formats a MatchmakingResults into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            if (MatchProperties != null)
            {
                serializedModel += "matchProperties," + MatchProperties.ToString() + ",";
            }
            if (GeneratorName != null)
            {
                serializedModel += "generatorName," + GeneratorName + ",";
            }
            if (QueueName != null)
            {
                serializedModel += "queueName," + QueueName + ",";
            }
            if (PoolName != null)
            {
                serializedModel += "poolName," + PoolName + ",";
            }
            if (EnvironmentId != null)
            {
                serializedModel += "environmentId," + EnvironmentId + ",";
            }
            if (BackfillTicketId != null)
            {
                serializedModel += "backfillTicketId," + BackfillTicketId + ",";
            }
            if (MatchId != null)
            {
                serializedModel += "matchId," + MatchId + ",";
            }
            if (PoolId != null)
            {
                serializedModel += "poolId," + PoolId;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a MatchmakingResults as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            if (GeneratorName != null)
            {
                var generatorNameStringValue = GeneratorName.ToString();
                dictionary.Add("generatorName", generatorNameStringValue);
            }

            if (QueueName != null)
            {
                var queueNameStringValue = QueueName.ToString();
                dictionary.Add("queueName", queueNameStringValue);
            }

            if (PoolName != null)
            {
                var poolNameStringValue = PoolName.ToString();
                dictionary.Add("poolName", poolNameStringValue);
            }

            if (EnvironmentId != null)
            {
                var environmentIdStringValue = EnvironmentId.ToString();
                dictionary.Add("environmentId", environmentIdStringValue);
            }

            if (BackfillTicketId != null)
            {
                var backfillTicketIdStringValue = BackfillTicketId.ToString();
                dictionary.Add("backfillTicketId", backfillTicketIdStringValue);
            }

            if (MatchId != null)
            {
                var matchIdStringValue = MatchId.ToString();
                dictionary.Add("matchId", matchIdStringValue);
            }

            if (PoolId != null)
            {
                var poolIdStringValue = PoolId.ToString();
                dictionary.Add("poolId", poolIdStringValue);
            }

            return dictionary;
        }
    }
}
