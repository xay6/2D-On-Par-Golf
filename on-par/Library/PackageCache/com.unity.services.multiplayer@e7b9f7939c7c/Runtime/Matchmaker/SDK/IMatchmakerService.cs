using System.Collections.Generic;
using System.Threading.Tasks;
using Unity.Services.Matchmaker.Models;

namespace Unity.Services.Matchmaker
{
    /// <summary>
    /// The Matchmaker Ticketing Service enables clients to queue and resolve matches with other clients on the same server's matchmaking queues.
    /// Includes Tickets API for clients and Backfill Tickets API for server hosts.
    ///
    /// Note: When a Backfill Ticket is automatically generated by the service, the allocation Uuid of the hosting service is the Backfill Ticket Id.
    /// </summary>
    public interface IMatchmakerService
    {
        /// <summary>
        /// Creates a matchmaking ticket effectively starting matchmaking.
        /// Async Operation.
        /// </summary>
        /// <param name="players">List of players to be added to the ticket (should include at least 1 player)</param>
        /// <param name="options">Options for creating the ticket.</param>
        /// <returns>Task for a Response object that includes the identifier of the created ticket.</returns>
        /// <exception cref="Unity.Services.Matchmaker.MatchmakerServiceException">An exception for the Matchmaker SDK containing reason for failure, messages, and any inner exceptions.</exception>
        Task<Models.CreateTicketResponse> CreateTicketAsync(List<Player> players, CreateTicketOptions options);

        /// <summary>
        /// Deletes a matchmaking ticket, ending the matchmaking process. This is called when the client wants to cancel matchmaking for the client.
        /// Should be called on timed out tickets as well to remove them from the queue.
        /// Async Operation.
        /// </summary>
        /// <param name="ticketId">ID of the matchmaking ticket to delete.</param>
        /// <returns>Awaitable task.</returns>
        /// <exception cref="Unity.Services.Matchmaker.MatchmakerServiceException">An exception for the Matchmaker SDK containing reason for failure, messages, and any inner exceptions.</exception>
        Task DeleteTicketAsync(string ticketId);

        /// <summary>
        /// Gets the status of a ticket assignment in the matchmaker. Poll until the assignment is fulfilled.
        /// For more information about polling speed and rate limits, please see the matchmaker documentation.
        /// Async Operation.
        /// </summary>
        /// <param name="ticketId">ID of the matchmaking ticket to retrieve.</param>
        /// <returns>Task for a response object containing assignment details or timeout.</returns>
        /// <exception cref="Unity.Services.Matchmaker.MatchmakerServiceException">An exception for the Matchmaker SDK containing reason for failure, messages, and any inner exceptions.</exception>
        Task<Models.TicketStatusResponse> GetTicketAsync(string ticketId);

        /// <summary>
        /// Approves a Matchmaking Backfill Ticket.
        /// Returns the BackfillTicket. Approving a backfill ticket will allow all proposed tickets associated with that backfill ticket to be assigned.
        /// This must be called periodically in order to get players via backfill. For more information about polling speed and rate limits, please see the matchmaker documentation.
        /// Async Operation.
        /// </summary>
        /// <param name="backfillTicketId">Backfill Ticket ID provided by the Matchmaker.</param>
        /// <returns>Task for a response object containing the backfill ticket ID, attributes and properties </returns>
        /// <exception cref="Unity.Services.Matchmaker.MatchmakerServiceException">An exception for the Matchmaker SDK containing reason for failure, messages, and any inner exceptions.</exception>
        Task<Models.BackfillTicket> ApproveBackfillTicketAsync(string backfillTicketId);

        /// <summary>
        /// Returns the backfill ticket Id wrapped in a CreateBackfillTicketResponse. This should be called when backfill begins.
        /// </summary>
        /// <param name="options">Configuration parameteters for creating a backfill ticket.</param>
        /// <returns>Task for a Response object that includes the identifier of the created backfill ticket.</returns>
        /// <exception cref="Unity.Services.Matchmaker.MatchmakerServiceException">An exception for the Matchmaker SDK containing reason for failure, messages, and any inner exceptions.</exception>
        Task<string> CreateBackfillTicketAsync(CreateBackfillTicketOptions options);

        /// <summary>
        /// Deleting a backfill ticket will reject all proposed tickets associated with that backfill ticket.
        /// Rejected tickets will return to the pool of tickets queryable by the match function. This should be called when backfill ends.
        /// </summary>
        /// <param name="backfillTicketId">Backfill Ticket ID provided by the Matchmaker.</param>
        /// <returns>Awaitable task.</returns>
        /// <exception cref="Unity.Services.Matchmaker.MatchmakerServiceException">An exception for the Matchmaker SDK containing reason for failure, messages, and any inner exceptions.</exception>
        Task DeleteBackfillTicketAsync(string backfillTicketId);

        /// <summary>
        /// Updating a backfill ticket will reject all proposed tickets associated with that backfill ticket.
        /// Rejected tickets will return to the pool of tickets queryable by match functions.
        /// This should be called when the server state changes in order to reflect the current server state such as when people leave the server or when people join the server without the involvement of the matchmaker.
        /// </summary>
        /// <param name="backfillTicketId">Backfill Ticket ID provided by the Matchmaker.</param>
        /// <param name="ticket">Ticket to override the target allocation in the matchmaker.</param>
        /// <returns>Awaitable task.</returns>
        /// <exception cref="Unity.Services.Matchmaker.MatchmakerServiceException">An exception for the Matchmaker SDK containing reason for failure, messages, and any inner exceptions.</exception>
        Task UpdateBackfillTicketAsync(string backfillTicketId, Models.BackfillTicket ticket);

        /// <summary>
        /// For a given match, gets the matchmaking results Matchmaker computed.
        /// </summary>
        /// <param name="matchId">Match ID provided by the Matchmaker.</param>
        /// <returns>Awaitable task.</returns>
        /// <exception cref="Unity.Services.Matchmaker.MatchmakerServiceException">An exception for the Matchmaker SDK containing reason for failure, messages, and any inner exceptions.</exception>
        Task<Models.StoredMatchmakingResults> GetMatchmakingResultsAsync(string matchId);
    }
}
