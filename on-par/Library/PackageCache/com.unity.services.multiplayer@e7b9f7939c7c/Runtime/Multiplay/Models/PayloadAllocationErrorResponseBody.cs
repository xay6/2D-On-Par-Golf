//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Multiplay.Http;



namespace Unity.Services.Multiplay.Models
{
    /// <summary>
    /// PayloadAllocationErrorResponseBody model
    /// </summary>
    [Preserve]
    [DataContract(Name = "PayloadAllocationErrorResponseBody")]
    internal class PayloadAllocationErrorResponseBody
    {
        /// <summary>
        /// Creates an instance of PayloadAllocationErrorResponseBody.
        /// </summary>
        /// <param name="success">the call went through successfully</param>
        /// <param name="error">there exists an error</param>
        /// <param name="errorCode">code of the error</param>
        /// <param name="errorMessage">a message describing the error</param>
        [Preserve]
        public PayloadAllocationErrorResponseBody(bool success, bool error, int errorCode, string errorMessage)
        {
            Success = success;
            Error = error;
            ErrorCode = errorCode;
            ErrorMessage = errorMessage;
        }

        /// <summary>
        /// the call went through successfully
        /// </summary>
        [Preserve]
        [DataMember(Name = "success", IsRequired = true, EmitDefaultValue = true)]
        public bool Success{ get; }

        /// <summary>
        /// there exists an error
        /// </summary>
        [Preserve]
        [DataMember(Name = "error", IsRequired = true, EmitDefaultValue = true)]
        public bool Error{ get; }

        /// <summary>
        /// code of the error
        /// </summary>
        [Preserve]
        [DataMember(Name = "error_code", IsRequired = true, EmitDefaultValue = true)]
        public int ErrorCode{ get; }

        /// <summary>
        /// a message describing the error
        /// </summary>
        [Preserve]
        [DataMember(Name = "error_message", IsRequired = true, EmitDefaultValue = true)]
        public string ErrorMessage{ get; }

        /// <summary>
        /// Formats a PayloadAllocationErrorResponseBody into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            serializedModel += "success," + Success.ToString() + ",";
            serializedModel += "error," + Error.ToString() + ",";
            serializedModel += "error_code," + ErrorCode.ToString() + ",";
            if (ErrorMessage != null)
            {
                serializedModel += "error_message," + ErrorMessage;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a PayloadAllocationErrorResponseBody as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            var successStringValue = Success.ToString();
            dictionary.Add("success", successStringValue);

            var errorStringValue = Error.ToString();
            dictionary.Add("error", errorStringValue);

            var error_codeStringValue = ErrorCode.ToString();
            dictionary.Add("error_code", error_codeStringValue);

            if (ErrorMessage != null)
            {
                var error_messageStringValue = ErrorMessage.ToString();
                dictionary.Add("error_message", error_messageStringValue);
            }

            return dictionary;
        }
    }
}
